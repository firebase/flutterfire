// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package io.flutter.plugins.firebase.core

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object GeneratedAndroidFirebaseCorePigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is GeneratedAndroidFirebaseCoreError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class GeneratedAndroidFirebaseCoreError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class CoreFirebaseOptions (
  val apiKey: String,
  val appId: String,
  val messagingSenderId: String,
  val projectId: String,
  val authDomain: String? = null,
  val databaseURL: String? = null,
  val storageBucket: String? = null,
  val measurementId: String? = null,
  val trackingId: String? = null,
  val deepLinkURLScheme: String? = null,
  val androidClientId: String? = null,
  val iosClientId: String? = null,
  val iosBundleId: String? = null,
  val appGroupId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CoreFirebaseOptions {
      val apiKey = pigeonVar_list[0] as String
      val appId = pigeonVar_list[1] as String
      val messagingSenderId = pigeonVar_list[2] as String
      val projectId = pigeonVar_list[3] as String
      val authDomain = pigeonVar_list[4] as String?
      val databaseURL = pigeonVar_list[5] as String?
      val storageBucket = pigeonVar_list[6] as String?
      val measurementId = pigeonVar_list[7] as String?
      val trackingId = pigeonVar_list[8] as String?
      val deepLinkURLScheme = pigeonVar_list[9] as String?
      val androidClientId = pigeonVar_list[10] as String?
      val iosClientId = pigeonVar_list[11] as String?
      val iosBundleId = pigeonVar_list[12] as String?
      val appGroupId = pigeonVar_list[13] as String?
      return CoreFirebaseOptions(apiKey, appId, messagingSenderId, projectId, authDomain, databaseURL, storageBucket, measurementId, trackingId, deepLinkURLScheme, androidClientId, iosClientId, iosBundleId, appGroupId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      apiKey,
      appId,
      messagingSenderId,
      projectId,
      authDomain,
      databaseURL,
      storageBucket,
      measurementId,
      trackingId,
      deepLinkURLScheme,
      androidClientId,
      iosClientId,
      iosBundleId,
      appGroupId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CoreFirebaseOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseCorePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CoreInitializeResponse (
  val name: String,
  val options: CoreFirebaseOptions,
  val isAutomaticDataCollectionEnabled: Boolean? = null,
  val pluginConstants: Map<String?, Any?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CoreInitializeResponse {
      val name = pigeonVar_list[0] as String
      val options = pigeonVar_list[1] as CoreFirebaseOptions
      val isAutomaticDataCollectionEnabled = pigeonVar_list[2] as Boolean?
      val pluginConstants = pigeonVar_list[3] as Map<String?, Any?>
      return CoreInitializeResponse(name, options, isAutomaticDataCollectionEnabled, pluginConstants)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      options,
      isAutomaticDataCollectionEnabled,
      pluginConstants,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CoreInitializeResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseCorePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class GeneratedAndroidFirebaseCorePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CoreFirebaseOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CoreInitializeResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CoreFirebaseOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is CoreInitializeResponse -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebaseCoreHostApi {
  fun initializeApp(appName: String, initializeAppRequest: CoreFirebaseOptions, callback: (Result<CoreInitializeResponse>) -> Unit)
  fun initializeCore(callback: (Result<List<CoreInitializeResponse>>) -> Unit)
  fun optionsFromResource(callback: (Result<CoreFirebaseOptions>) -> Unit)

  companion object {
    /** The codec used by FirebaseCoreHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseCorePigeonCodec()
    }
    /** Sets up an instance of `FirebaseCoreHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebaseCoreHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.initializeApp$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val initializeAppRequestArg = args[1] as CoreFirebaseOptions
            api.initializeApp(appNameArg, initializeAppRequestArg) { result: Result<CoreInitializeResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.initializeCore$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.initializeCore{ result: Result<List<CoreInitializeResponse>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.optionsFromResource$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.optionsFromResource{ result: Result<CoreFirebaseOptions> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebaseAppHostApi {
  fun setAutomaticDataCollectionEnabled(appName: String, enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun setAutomaticResourceManagementEnabled(appName: String, enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun delete(appName: String, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by FirebaseAppHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseCorePigeonCodec()
    }
    /** Sets up an instance of `FirebaseAppHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebaseAppHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.setAutomaticDataCollectionEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val enabledArg = args[1] as Boolean
            api.setAutomaticDataCollectionEnabled(appNameArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.setAutomaticResourceManagementEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val enabledArg = args[1] as Boolean
            api.setAutomaticResourceManagementEnabled(appNameArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.delete$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            api.delete(appNameArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCorePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
