// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsmessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsmessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsmessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashmessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashmessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashmessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct CoreFirebaseOptions: Hashable {
  var apiKey: String
  var appId: String
  var messagingSenderId: String
  var projectId: String
  var authDomain: String? = nil
  var databaseURL: String? = nil
  var storageBucket: String? = nil
  var measurementId: String? = nil
  var trackingId: String? = nil
  var deepLinkURLScheme: String? = nil
  var androidClientId: String? = nil
  var iosClientId: String? = nil
  var iosBundleId: String? = nil
  var appGroupId: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CoreFirebaseOptions? {
    let apiKey = pigeonVar_list[0] as! String
    let appId = pigeonVar_list[1] as! String
    let messagingSenderId = pigeonVar_list[2] as! String
    let projectId = pigeonVar_list[3] as! String
    let authDomain: String? = nilOrValue(pigeonVar_list[4])
    let databaseURL: String? = nilOrValue(pigeonVar_list[5])
    let storageBucket: String? = nilOrValue(pigeonVar_list[6])
    let measurementId: String? = nilOrValue(pigeonVar_list[7])
    let trackingId: String? = nilOrValue(pigeonVar_list[8])
    let deepLinkURLScheme: String? = nilOrValue(pigeonVar_list[9])
    let androidClientId: String? = nilOrValue(pigeonVar_list[10])
    let iosClientId: String? = nilOrValue(pigeonVar_list[11])
    let iosBundleId: String? = nilOrValue(pigeonVar_list[12])
    let appGroupId: String? = nilOrValue(pigeonVar_list[13])

    return CoreFirebaseOptions(
      apiKey: apiKey,
      appId: appId,
      messagingSenderId: messagingSenderId,
      projectId: projectId,
      authDomain: authDomain,
      databaseURL: databaseURL,
      storageBucket: storageBucket,
      measurementId: measurementId,
      trackingId: trackingId,
      deepLinkURLScheme: deepLinkURLScheme,
      androidClientId: androidClientId,
      iosClientId: iosClientId,
      iosBundleId: iosBundleId,
      appGroupId: appGroupId
    )
  }
  func toList() -> [Any?] {
    return [
      apiKey,
      appId,
      messagingSenderId,
      projectId,
      authDomain,
      databaseURL,
      storageBucket,
      measurementId,
      trackingId,
      deepLinkURLScheme,
      androidClientId,
      iosClientId,
      iosBundleId,
      appGroupId,
    ]
  }
  static func == (lhs: CoreFirebaseOptions, rhs: CoreFirebaseOptions) -> Bool {
    return deepEqualsmessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashmessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CoreInitializeResponse: Hashable {
  var name: String
  var options: CoreFirebaseOptions
  var isAutomaticDataCollectionEnabled: Bool? = nil
  var pluginConstants: [String?: Any?]


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CoreInitializeResponse? {
    let name = pigeonVar_list[0] as! String
    let options = pigeonVar_list[1] as! CoreFirebaseOptions
    let isAutomaticDataCollectionEnabled: Bool? = nilOrValue(pigeonVar_list[2])
    let pluginConstants = pigeonVar_list[3] as! [String?: Any?]

    return CoreInitializeResponse(
      name: name,
      options: options,
      isAutomaticDataCollectionEnabled: isAutomaticDataCollectionEnabled,
      pluginConstants: pluginConstants
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      options,
      isAutomaticDataCollectionEnabled,
      pluginConstants,
    ]
  }
  static func == (lhs: CoreInitializeResponse, rhs: CoreInitializeResponse) -> Bool {
    return deepEqualsmessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashmessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return CoreFirebaseOptions.fromList(self.readValue() as! [Any?])
    case 130:
      return CoreInitializeResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CoreFirebaseOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? CoreInitializeResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FirebaseCoreHostApi {
  func initializeApp(appName: String, initializeAppRequest: CoreFirebaseOptions, completion: @escaping (Result<CoreInitializeResponse, Error>) -> Void)
  func initializeCore(completion: @escaping (Result<[CoreInitializeResponse], Error>) -> Void)
  func optionsFromResource(completion: @escaping (Result<CoreFirebaseOptions, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FirebaseCoreHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `FirebaseCoreHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FirebaseCoreHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.initializeApp\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeAppChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let initializeAppRequestArg = args[1] as! CoreFirebaseOptions
        api.initializeApp(appName: appNameArg, initializeAppRequest: initializeAppRequestArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeAppChannel.setMessageHandler(nil)
    }
    let initializeCoreChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.initializeCore\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeCoreChannel.setMessageHandler { _, reply in
        api.initializeCore { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeCoreChannel.setMessageHandler(nil)
    }
    let optionsFromResourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseCoreHostApi.optionsFromResource\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      optionsFromResourceChannel.setMessageHandler { _, reply in
        api.optionsFromResource { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      optionsFromResourceChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FirebaseAppHostApi {
  func setAutomaticDataCollectionEnabled(appName: String, enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func setAutomaticResourceManagementEnabled(appName: String, enabled: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func delete(appName: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FirebaseAppHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `FirebaseAppHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FirebaseAppHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setAutomaticDataCollectionEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.setAutomaticDataCollectionEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAutomaticDataCollectionEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let enabledArg = args[1] as! Bool
        api.setAutomaticDataCollectionEnabled(appName: appNameArg, enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setAutomaticDataCollectionEnabledChannel.setMessageHandler(nil)
    }
    let setAutomaticResourceManagementEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.setAutomaticResourceManagementEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAutomaticResourceManagementEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let enabledArg = args[1] as! Bool
        api.setAutomaticResourceManagementEnabled(appName: appNameArg, enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setAutomaticResourceManagementEnabledChannel.setMessageHandler(nil)
    }
    let deleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.firebase_core_platform_interface.FirebaseAppHostApi.delete\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.delete(appName: appNameArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteChannel.setMessageHandler(nil)
    }
  }
}
