// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_database_windows {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};



// Generated class from Pigeon that represents data sent in messages.
class DatabasePigeonSettings {
 public:
  // Constructs an object setting all non-nullable fields.
  DatabasePigeonSettings();

  // Constructs an object setting all fields.
  explicit DatabasePigeonSettings(
    const bool* persistence_enabled,
    const int64_t* cache_size_bytes,
    const bool* logging_enabled,
    const std::string* emulator_host,
    const int64_t* emulator_port);

  const bool* persistence_enabled() const;
  void set_persistence_enabled(const bool* value_arg);
  void set_persistence_enabled(bool value_arg);

  const int64_t* cache_size_bytes() const;
  void set_cache_size_bytes(const int64_t* value_arg);
  void set_cache_size_bytes(int64_t value_arg);

  const bool* logging_enabled() const;
  void set_logging_enabled(const bool* value_arg);
  void set_logging_enabled(bool value_arg);

  const std::string* emulator_host() const;
  void set_emulator_host(const std::string_view* value_arg);
  void set_emulator_host(std::string_view value_arg);

  const int64_t* emulator_port() const;
  void set_emulator_port(const int64_t* value_arg);
  void set_emulator_port(int64_t value_arg);

 private:
  static DatabasePigeonSettings FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class DatabasePigeonFirebaseApp;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<bool> persistence_enabled_;
  std::optional<int64_t> cache_size_bytes_;
  std::optional<bool> logging_enabled_;
  std::optional<std::string> emulator_host_;
  std::optional<int64_t> emulator_port_;
};


// Generated class from Pigeon that represents data sent in messages.
class DatabasePigeonFirebaseApp {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit DatabasePigeonFirebaseApp(
    const std::string& app_name,
    const DatabasePigeonSettings& settings);

  // Constructs an object setting all fields.
  explicit DatabasePigeonFirebaseApp(
    const std::string& app_name,
    const std::string* database_u_r_l,
    const DatabasePigeonSettings& settings);

  ~DatabasePigeonFirebaseApp() = default;
  DatabasePigeonFirebaseApp(const DatabasePigeonFirebaseApp& other);
  DatabasePigeonFirebaseApp& operator=(const DatabasePigeonFirebaseApp& other);
  DatabasePigeonFirebaseApp(DatabasePigeonFirebaseApp&& other) = default;
  DatabasePigeonFirebaseApp& operator=(DatabasePigeonFirebaseApp&& other) noexcept = default;
  const std::string& app_name() const;
  void set_app_name(std::string_view value_arg);

  const std::string* database_u_r_l() const;
  void set_database_u_r_l(const std::string_view* value_arg);
  void set_database_u_r_l(std::string_view value_arg);

  const DatabasePigeonSettings& settings() const;
  void set_settings(const DatabasePigeonSettings& value_arg);

 private:
  static DatabasePigeonFirebaseApp FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string app_name_;
  std::optional<std::string> database_u_r_l_;
  std::unique_ptr<DatabasePigeonSettings> settings_;
};


// Generated class from Pigeon that represents data sent in messages.
class DatabaseReferencePlatform {
 public:
  // Constructs an object setting all fields.
  explicit DatabaseReferencePlatform(const std::string& path);

  const std::string& path() const;
  void set_path(std::string_view value_arg);

 private:
  static DatabaseReferencePlatform FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string path_;
};


// Generated class from Pigeon that represents data sent in messages.
class DatabaseReferenceRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit DatabaseReferenceRequest(const std::string& path);

  // Constructs an object setting all fields.
  explicit DatabaseReferenceRequest(
    const std::string& path,
    const flutter::EncodableValue* value,
    const flutter::EncodableValue* priority);

  const std::string& path() const;
  void set_path(std::string_view value_arg);

  const flutter::EncodableValue* value() const;
  void set_value(const flutter::EncodableValue* value_arg);
  void set_value(const flutter::EncodableValue& value_arg);

  const flutter::EncodableValue* priority() const;
  void set_priority(const flutter::EncodableValue* value_arg);
  void set_priority(const flutter::EncodableValue& value_arg);

 private:
  static DatabaseReferenceRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string path_;
  std::optional<flutter::EncodableValue> value_;
  std::optional<flutter::EncodableValue> priority_;
};


// Generated class from Pigeon that represents data sent in messages.
class UpdateRequest {
 public:
  // Constructs an object setting all fields.
  explicit UpdateRequest(
    const std::string& path,
    const flutter::EncodableMap& value);

  const std::string& path() const;
  void set_path(std::string_view value_arg);

  const flutter::EncodableMap& value() const;
  void set_value(const flutter::EncodableMap& value_arg);

 private:
  static UpdateRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string path_;
  flutter::EncodableMap value_;
};


// Generated class from Pigeon that represents data sent in messages.
class TransactionRequest {
 public:
  // Constructs an object setting all fields.
  explicit TransactionRequest(
    const std::string& path,
    int64_t transaction_key,
    bool apply_locally);

  const std::string& path() const;
  void set_path(std::string_view value_arg);

  int64_t transaction_key() const;
  void set_transaction_key(int64_t value_arg);

  bool apply_locally() const;
  void set_apply_locally(bool value_arg);

 private:
  static TransactionRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string path_;
  int64_t transaction_key_;
  bool apply_locally_;
};


// Generated class from Pigeon that represents data sent in messages.
class QueryRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit QueryRequest(
    const std::string& path,
    const flutter::EncodableList& modifiers);

  // Constructs an object setting all fields.
  explicit QueryRequest(
    const std::string& path,
    const flutter::EncodableList& modifiers,
    const bool* value);

  const std::string& path() const;
  void set_path(std::string_view value_arg);

  const flutter::EncodableList& modifiers() const;
  void set_modifiers(const flutter::EncodableList& value_arg);

  const bool* value() const;
  void set_value(const bool* value_arg);
  void set_value(bool value_arg);

 private:
  static QueryRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::string path_;
  flutter::EncodableList modifiers_;
  std::optional<bool> value_;
};


// Generated class from Pigeon that represents data sent in messages.
class TransactionHandlerResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit TransactionHandlerResult(
    bool aborted,
    bool exception);

  // Constructs an object setting all fields.
  explicit TransactionHandlerResult(
    const flutter::EncodableValue* value,
    bool aborted,
    bool exception);

  const flutter::EncodableValue* value() const;
  void set_value(const flutter::EncodableValue* value_arg);
  void set_value(const flutter::EncodableValue& value_arg);

  bool aborted() const;
  void set_aborted(bool value_arg);

  bool exception() const;
  void set_exception(bool value_arg);

 private:
  static TransactionHandlerResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseDatabaseHostApi;
  friend class FirebaseDatabaseFlutterApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<flutter::EncodableValue> value_;
  bool aborted_;
  bool exception_;
};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class FirebaseDatabaseHostApi {
 public:
  FirebaseDatabaseHostApi(const FirebaseDatabaseHostApi&) = delete;
  FirebaseDatabaseHostApi& operator=(const FirebaseDatabaseHostApi&) = delete;
  virtual ~FirebaseDatabaseHostApi() {}
  virtual void GoOnline(
    const DatabasePigeonFirebaseApp& app,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void GoOffline(
    const DatabasePigeonFirebaseApp& app,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetPersistenceEnabled(
    const DatabasePigeonFirebaseApp& app,
    bool enabled,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetPersistenceCacheSizeBytes(
    const DatabasePigeonFirebaseApp& app,
    int64_t cache_size,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetLoggingEnabled(
    const DatabasePigeonFirebaseApp& app,
    bool enabled,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void UseDatabaseEmulator(
    const DatabasePigeonFirebaseApp& app,
    const std::string& host,
    int64_t port,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void Ref(
    const DatabasePigeonFirebaseApp& app,
    const std::string* path,
    std::function<void(ErrorOr<DatabaseReferencePlatform> reply)> result) = 0;
  virtual void RefFromURL(
    const DatabasePigeonFirebaseApp& app,
    const std::string& url,
    std::function<void(ErrorOr<DatabaseReferencePlatform> reply)> result) = 0;
  virtual void PurgeOutstandingWrites(
    const DatabasePigeonFirebaseApp& app,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceSet(
    const DatabasePigeonFirebaseApp& app,
    const DatabaseReferenceRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceSetWithPriority(
    const DatabasePigeonFirebaseApp& app,
    const DatabaseReferenceRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceUpdate(
    const DatabasePigeonFirebaseApp& app,
    const UpdateRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceSetPriority(
    const DatabasePigeonFirebaseApp& app,
    const DatabaseReferenceRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceRunTransaction(
    const DatabasePigeonFirebaseApp& app,
    const TransactionRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void DatabaseReferenceGetTransactionResult(
    const DatabasePigeonFirebaseApp& app,
    int64_t transaction_key,
    std::function<void(ErrorOr<flutter::EncodableMap> reply)> result) = 0;
  virtual void OnDisconnectSet(
    const DatabasePigeonFirebaseApp& app,
    const DatabaseReferenceRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void OnDisconnectSetWithPriority(
    const DatabasePigeonFirebaseApp& app,
    const DatabaseReferenceRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void OnDisconnectUpdate(
    const DatabasePigeonFirebaseApp& app,
    const UpdateRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void OnDisconnectCancel(
    const DatabasePigeonFirebaseApp& app,
    const std::string& path,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void QueryObserve(
    const DatabasePigeonFirebaseApp& app,
    const QueryRequest& request,
    std::function<void(ErrorOr<std::string> reply)> result) = 0;
  virtual void QueryKeepSynced(
    const DatabasePigeonFirebaseApp& app,
    const QueryRequest& request,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;

  // The codec used by FirebaseDatabaseHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FirebaseDatabaseHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FirebaseDatabaseHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FirebaseDatabaseHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  FirebaseDatabaseHostApi() = default;
};
// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class FirebaseDatabaseFlutterApi {
 public:
  FirebaseDatabaseFlutterApi(flutter::BinaryMessenger* binary_messenger);
  FirebaseDatabaseFlutterApi(
    flutter::BinaryMessenger* binary_messenger,
    const std::string& message_channel_suffix);
  static const flutter::StandardMessageCodec& GetCodec();
  void CallTransactionHandler(
    int64_t transaction_key,
    const flutter::EncodableValue* snapshot_value,
    std::function<void(const TransactionHandlerResult&)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);
 private:
  flutter::BinaryMessenger* binary_messenger_;
  std::string message_channel_suffix_;
};

}  // namespace firebase_database_windows
#endif  // PIGEON_MESSAGES_G_H_
