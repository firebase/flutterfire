// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package io.flutter.plugins.firebase.database

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object GeneratedAndroidFirebaseDatabasePigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class DatabasePigeonSettings (
  val persistenceEnabled: Boolean? = null,
  val cacheSizeBytes: Long? = null,
  val loggingEnabled: Boolean? = null,
  val emulatorHost: String? = null,
  val emulatorPort: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DatabasePigeonSettings {
      val persistenceEnabled = pigeonVar_list[0] as Boolean?
      val cacheSizeBytes = pigeonVar_list[1] as Long?
      val loggingEnabled = pigeonVar_list[2] as Boolean?
      val emulatorHost = pigeonVar_list[3] as String?
      val emulatorPort = pigeonVar_list[4] as Long?
      return DatabasePigeonSettings(persistenceEnabled, cacheSizeBytes, loggingEnabled, emulatorHost, emulatorPort)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      persistenceEnabled,
      cacheSizeBytes,
      loggingEnabled,
      emulatorHost,
      emulatorPort,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DatabasePigeonSettings) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DatabasePigeonFirebaseApp (
  val appName: String,
  val databaseURL: String? = null,
  val settings: DatabasePigeonSettings
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DatabasePigeonFirebaseApp {
      val appName = pigeonVar_list[0] as String
      val databaseURL = pigeonVar_list[1] as String?
      val settings = pigeonVar_list[2] as DatabasePigeonSettings
      return DatabasePigeonFirebaseApp(appName, databaseURL, settings)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      appName,
      databaseURL,
      settings,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DatabasePigeonFirebaseApp) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DatabaseReferencePlatform (
  val path: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DatabaseReferencePlatform {
      val path = pigeonVar_list[0] as String
      return DatabaseReferencePlatform(path)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      path,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DatabaseReferencePlatform) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DatabaseReferenceRequest (
  val path: String,
  val value: Any? = null,
  val priority: Any? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DatabaseReferenceRequest {
      val path = pigeonVar_list[0] as String
      val value = pigeonVar_list[1]
      val priority = pigeonVar_list[2]
      return DatabaseReferenceRequest(path, value, priority)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      path,
      value,
      priority,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is DatabaseReferenceRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdateRequest (
  val path: String,
  val value: Map<String, Any?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): UpdateRequest {
      val path = pigeonVar_list[0] as String
      val value = pigeonVar_list[1] as Map<String, Any?>
      return UpdateRequest(path, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      path,
      value,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is UpdateRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TransactionRequest (
  val path: String,
  val transactionKey: Long,
  val applyLocally: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TransactionRequest {
      val path = pigeonVar_list[0] as String
      val transactionKey = pigeonVar_list[1] as Long
      val applyLocally = pigeonVar_list[2] as Boolean
      return TransactionRequest(path, transactionKey, applyLocally)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      path,
      transactionKey,
      applyLocally,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TransactionRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class QueryRequest (
  val path: String,
  val modifiers: List<Map<String, Any?>>,
  val value: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): QueryRequest {
      val path = pigeonVar_list[0] as String
      val modifiers = pigeonVar_list[1] as List<Map<String, Any?>>
      val value = pigeonVar_list[2] as Boolean?
      return QueryRequest(path, modifiers, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      path,
      modifiers,
      value,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is QueryRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TransactionHandlerResult (
  val value: Any? = null,
  val aborted: Boolean,
  val exception: Boolean
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TransactionHandlerResult {
      val value = pigeonVar_list[0]
      val aborted = pigeonVar_list[1] as Boolean
      val exception = pigeonVar_list[2] as Boolean
      return TransactionHandlerResult(value, aborted, exception)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      value,
      aborted,
      exception,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TransactionHandlerResult) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseDatabasePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class GeneratedAndroidFirebaseDatabasePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DatabasePigeonSettings.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DatabasePigeonFirebaseApp.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DatabaseReferencePlatform.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DatabaseReferenceRequest.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdateRequest.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TransactionRequest.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          QueryRequest.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TransactionHandlerResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is DatabasePigeonSettings -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is DatabasePigeonFirebaseApp -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is DatabaseReferencePlatform -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is DatabaseReferenceRequest -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is UpdateRequest -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is TransactionRequest -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is QueryRequest -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is TransactionHandlerResult -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebaseDatabaseHostApi {
  fun goOnline(app: DatabasePigeonFirebaseApp, callback: (Result<Unit>) -> Unit)
  fun goOffline(app: DatabasePigeonFirebaseApp, callback: (Result<Unit>) -> Unit)
  fun setPersistenceEnabled(app: DatabasePigeonFirebaseApp, enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun setPersistenceCacheSizeBytes(app: DatabasePigeonFirebaseApp, cacheSize: Long, callback: (Result<Unit>) -> Unit)
  fun setLoggingEnabled(app: DatabasePigeonFirebaseApp, enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun useDatabaseEmulator(app: DatabasePigeonFirebaseApp, host: String, port: Long, callback: (Result<Unit>) -> Unit)
  fun ref(app: DatabasePigeonFirebaseApp, path: String?, callback: (Result<DatabaseReferencePlatform>) -> Unit)
  fun refFromURL(app: DatabasePigeonFirebaseApp, url: String, callback: (Result<DatabaseReferencePlatform>) -> Unit)
  fun purgeOutstandingWrites(app: DatabasePigeonFirebaseApp, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceSet(app: DatabasePigeonFirebaseApp, request: DatabaseReferenceRequest, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceSetWithPriority(app: DatabasePigeonFirebaseApp, request: DatabaseReferenceRequest, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceUpdate(app: DatabasePigeonFirebaseApp, request: UpdateRequest, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceSetPriority(app: DatabasePigeonFirebaseApp, request: DatabaseReferenceRequest, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceRunTransaction(app: DatabasePigeonFirebaseApp, request: TransactionRequest, callback: (Result<Unit>) -> Unit)
  fun databaseReferenceGetTransactionResult(app: DatabasePigeonFirebaseApp, transactionKey: Long, callback: (Result<Map<String, Any?>>) -> Unit)
  fun onDisconnectSet(app: DatabasePigeonFirebaseApp, request: DatabaseReferenceRequest, callback: (Result<Unit>) -> Unit)
  fun onDisconnectSetWithPriority(app: DatabasePigeonFirebaseApp, request: DatabaseReferenceRequest, callback: (Result<Unit>) -> Unit)
  fun onDisconnectUpdate(app: DatabasePigeonFirebaseApp, request: UpdateRequest, callback: (Result<Unit>) -> Unit)
  fun onDisconnectCancel(app: DatabasePigeonFirebaseApp, path: String, callback: (Result<Unit>) -> Unit)
  fun queryObserve(app: DatabasePigeonFirebaseApp, request: QueryRequest, callback: (Result<String>) -> Unit)
  fun queryKeepSynced(app: DatabasePigeonFirebaseApp, request: QueryRequest, callback: (Result<Unit>) -> Unit)
  fun queryGet(app: DatabasePigeonFirebaseApp, request: QueryRequest, callback: (Result<Map<String, Any?>>) -> Unit)

  companion object {
    /** The codec used by FirebaseDatabaseHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseDatabasePigeonCodec()
    }
    /** Sets up an instance of `FirebaseDatabaseHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebaseDatabaseHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.goOnline$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            api.goOnline(appArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.goOffline$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            api.goOffline(appArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.setPersistenceEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val enabledArg = args[1] as Boolean
            api.setPersistenceEnabled(appArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.setPersistenceCacheSizeBytes$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val cacheSizeArg = args[1] as Long
            api.setPersistenceCacheSizeBytes(appArg, cacheSizeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.setLoggingEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val enabledArg = args[1] as Boolean
            api.setLoggingEnabled(appArg, enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.useDatabaseEmulator$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val hostArg = args[1] as String
            val portArg = args[2] as Long
            api.useDatabaseEmulator(appArg, hostArg, portArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.ref$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val pathArg = args[1] as String?
            api.ref(appArg, pathArg) { result: Result<DatabaseReferencePlatform> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.refFromURL$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val urlArg = args[1] as String
            api.refFromURL(appArg, urlArg) { result: Result<DatabaseReferencePlatform> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.purgeOutstandingWrites$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            api.purgeOutstandingWrites(appArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceSet$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as DatabaseReferenceRequest
            api.databaseReferenceSet(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceSetWithPriority$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as DatabaseReferenceRequest
            api.databaseReferenceSetWithPriority(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceUpdate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as UpdateRequest
            api.databaseReferenceUpdate(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceSetPriority$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as DatabaseReferenceRequest
            api.databaseReferenceSetPriority(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceRunTransaction$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as TransactionRequest
            api.databaseReferenceRunTransaction(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.databaseReferenceGetTransactionResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val transactionKeyArg = args[1] as Long
            api.databaseReferenceGetTransactionResult(appArg, transactionKeyArg) { result: Result<Map<String, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.onDisconnectSet$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as DatabaseReferenceRequest
            api.onDisconnectSet(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.onDisconnectSetWithPriority$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as DatabaseReferenceRequest
            api.onDisconnectSetWithPriority(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.onDisconnectUpdate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as UpdateRequest
            api.onDisconnectUpdate(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.onDisconnectCancel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val pathArg = args[1] as String
            api.onDisconnectCancel(appArg, pathArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.queryObserve$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as QueryRequest
            api.queryObserve(appArg, requestArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.queryKeepSynced$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as QueryRequest
            api.queryKeepSynced(appArg, requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseHostApi.queryGet$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as DatabasePigeonFirebaseApp
            val requestArg = args[1] as QueryRequest
            api.queryGet(appArg, requestArg) { result: Result<Map<String, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseDatabasePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FirebaseDatabaseFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FirebaseDatabaseFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseDatabasePigeonCodec()
    }
  }
  fun callTransactionHandler(transactionKeyArg: Long, snapshotValueArg: Any?, callback: (Result<TransactionHandlerResult>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.firebase_database_platform_interface.FirebaseDatabaseFlutterApi.callTransactionHandler$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(transactionKeyArg, snapshotValueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as TransactionHandlerResult
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(GeneratedAndroidFirebaseDatabasePigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
