// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFirebasePerformanceMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFirebasePerformanceMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFirebasePerformanceMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be
    // untrue.
    return false
  }
}

func deepHashFirebasePerformanceMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
    for item in valueList {
      deepHashFirebasePerformanceMessages(value: item, hasher: &hasher)
    }
    return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys {
      hasher.combine(key)
      deepHashFirebasePerformanceMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

enum HttpMethod: Int {
  case connect = 0
  case delete = 1
  case get = 2
  case head = 3
  case options = 4
  case patch = 5
  case post = 6
  case put = 7
  case trace = 8
}

/// Generated class from Pigeon that represents data sent in messages.
struct HttpMetricOptions: Hashable {
  var url: String
  var httpMethod: HttpMethod

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> HttpMetricOptions? {
    let url = pigeonVar_list[0] as! String
    let httpMethod = pigeonVar_list[1] as! HttpMethod

    return HttpMetricOptions(
      url: url,
      httpMethod: httpMethod
    )
  }

  func toList() -> [Any?] {
    [
      url,
      httpMethod,
    ]
  }

  static func == (lhs: HttpMetricOptions, rhs: HttpMetricOptions) -> Bool {
    deepEqualsFirebasePerformanceMessages(lhs.toList(), rhs.toList())
  }

  func hash(into hasher: inout Hasher) {
    deepHashFirebasePerformanceMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HttpMetricAttributes: Hashable {
  var httpResponseCode: Int64?
  var requestPayloadSize: Int64?
  var responsePayloadSize: Int64?
  var responseContentType: String?
  var attributes: [String: String]?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> HttpMetricAttributes? {
    let httpResponseCode: Int64? = nilOrValue(pigeonVar_list[0])
    let requestPayloadSize: Int64? = nilOrValue(pigeonVar_list[1])
    let responsePayloadSize: Int64? = nilOrValue(pigeonVar_list[2])
    let responseContentType: String? = nilOrValue(pigeonVar_list[3])
    let attributes: [String: String]? = nilOrValue(pigeonVar_list[4])

    return HttpMetricAttributes(
      httpResponseCode: httpResponseCode,
      requestPayloadSize: requestPayloadSize,
      responsePayloadSize: responsePayloadSize,
      responseContentType: responseContentType,
      attributes: attributes
    )
  }

  func toList() -> [Any?] {
    [
      httpResponseCode,
      requestPayloadSize,
      responsePayloadSize,
      responseContentType,
      attributes,
    ]
  }

  static func == (lhs: HttpMetricAttributes, rhs: HttpMetricAttributes) -> Bool {
    deepEqualsFirebasePerformanceMessages(lhs.toList(), rhs.toList())
  }

  func hash(into hasher: inout Hasher) {
    deepHashFirebasePerformanceMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TraceAttributes: Hashable {
  var metrics: [String: Int64]?
  var attributes: [String: String]?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> TraceAttributes? {
    let metrics: [String: Int64]? = nilOrValue(pigeonVar_list[0])
    let attributes: [String: String]? = nilOrValue(pigeonVar_list[1])

    return TraceAttributes(
      metrics: metrics,
      attributes: attributes
    )
  }

  func toList() -> [Any?] {
    [
      metrics,
      attributes,
    ]
  }

  static func == (lhs: TraceAttributes, rhs: TraceAttributes) -> Bool {
    deepEqualsFirebasePerformanceMessages(lhs.toList(), rhs.toList())
  }

  func hash(into hasher: inout Hasher) {
    deepHashFirebasePerformanceMessages(value: toList(), hasher: &hasher)
  }
}

private class FirebasePerformanceMessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(readValue() as! Int?)
      if let enumResultAsInt {
        return HttpMethod(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return HttpMetricOptions.fromList(readValue() as! [Any?])
    case 131:
      return HttpMetricAttributes.fromList(readValue() as! [Any?])
    case 132:
      return TraceAttributes.fromList(readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FirebasePerformanceMessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HttpMethod {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? HttpMetricOptions {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? HttpMetricAttributes {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? TraceAttributes {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FirebasePerformanceMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    FirebasePerformanceMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    FirebasePerformanceMessagesPigeonCodecWriter(data: data)
  }
}

class FirebasePerformanceMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared =
    FirebasePerformanceMessagesPigeonCodec(
      readerWriter: FirebasePerformanceMessagesPigeonCodecReaderWriter()
    )
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FirebasePerformanceHostApi {
  func setPerformanceCollectionEnabled(enabled: Bool,
                                       completion: @escaping (Result<Void, Error>) -> Void)
  func isPerformanceCollectionEnabled(completion: @escaping (Result<Bool, Error>) -> Void)
  func startTrace(name: String, completion: @escaping (Result<Int64, Error>) -> Void)
  func stopTrace(handle: Int64, attributes: TraceAttributes,
                 completion: @escaping (Result<Void, Error>) -> Void)
  func startHttpMetric(options: HttpMetricOptions,
                       completion: @escaping (Result<Int64, Error>) -> Void)
  func stopHttpMetric(handle: Int64, attributes: HttpMetricAttributes,
                      completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FirebasePerformanceHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FirebasePerformanceMessagesPigeonCodec.shared }
  /// Sets up an instance of `FirebasePerformanceHostApi` to handle messages through the
  /// `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FirebasePerformanceHostApi?,
                    messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setPerformanceCollectionEnabledChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.setPerformanceCollectionEnabled\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setPerformanceCollectionEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.setPerformanceCollectionEnabled(enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setPerformanceCollectionEnabledChannel.setMessageHandler(nil)
    }
    let isPerformanceCollectionEnabledChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.isPerformanceCollectionEnabled\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      isPerformanceCollectionEnabledChannel.setMessageHandler { _, reply in
        api.isPerformanceCollectionEnabled { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      isPerformanceCollectionEnabledChannel.setMessageHandler(nil)
    }
    let startTraceChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.startTrace\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      startTraceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        api.startTrace(name: nameArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startTraceChannel.setMessageHandler(nil)
    }
    let stopTraceChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.stopTrace\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      stopTraceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! Int64
        let attributesArg = args[1] as! TraceAttributes
        api.stopTrace(handle: handleArg, attributes: attributesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopTraceChannel.setMessageHandler(nil)
    }
    let startHttpMetricChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.startHttpMetric\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      startHttpMetricChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! HttpMetricOptions
        api.startHttpMetric(options: optionsArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startHttpMetricChannel.setMessageHandler(nil)
    }
    let stopHttpMetricChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.stopHttpMetric\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      stopHttpMetricChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! Int64
        let attributesArg = args[1] as! HttpMetricAttributes
        api.stopHttpMetric(handle: handleArg, attributes: attributesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopHttpMetricChannel.setMessageHandler(nil)
    }
  }
}
