// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package io.flutter.plugins.firebase.performance

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object GeneratedAndroidFirebasePerformancePigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class HttpMethod(val raw: Int) {
  CONNECT(0),
  DELETE(1),
  GET(2),
  HEAD(3),
  OPTIONS(4),
  PATCH(5),
  POST(6),
  PUT(7),
  TRACE(8);

  companion object {
    fun ofRaw(raw: Int): HttpMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HttpMetricOptions (
  val url: String,
  val httpMethod: HttpMethod
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): HttpMetricOptions {
      val url = pigeonVar_list[0] as String
      val httpMethod = pigeonVar_list[1] as HttpMethod
      return HttpMetricOptions(url, httpMethod)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      url,
      httpMethod,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is HttpMetricOptions) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebasePerformancePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class HttpMetricAttributes (
  val httpResponseCode: Long? = null,
  val requestPayloadSize: Long? = null,
  val responsePayloadSize: Long? = null,
  val responseContentType: String? = null,
  val attributes: Map<String, String>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): HttpMetricAttributes {
      val httpResponseCode = pigeonVar_list[0] as Long?
      val requestPayloadSize = pigeonVar_list[1] as Long?
      val responsePayloadSize = pigeonVar_list[2] as Long?
      val responseContentType = pigeonVar_list[3] as String?
      val attributes = pigeonVar_list[4] as Map<String, String>?
      return HttpMetricAttributes(httpResponseCode, requestPayloadSize, responsePayloadSize, responseContentType, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      httpResponseCode,
      requestPayloadSize,
      responsePayloadSize,
      responseContentType,
      attributes,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is HttpMetricAttributes) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebasePerformancePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TraceAttributes (
  val metrics: Map<String, Long>? = null,
  val attributes: Map<String, String>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): TraceAttributes {
      val metrics = pigeonVar_list[0] as Map<String, Long>?
      val attributes = pigeonVar_list[1] as Map<String, String>?
      return TraceAttributes(metrics, attributes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      metrics,
      attributes,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is TraceAttributes) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebasePerformancePigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class GeneratedAndroidFirebasePerformancePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          HttpMethod.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HttpMetricOptions.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          HttpMetricAttributes.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TraceAttributes.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is HttpMethod -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is HttpMetricOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is HttpMetricAttributes -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is TraceAttributes -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebasePerformanceHostApi {
  fun setPerformanceCollectionEnabled(enabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun isPerformanceCollectionEnabled(callback: (Result<Boolean>) -> Unit)
  fun startTrace(name: String, callback: (Result<Long>) -> Unit)
  fun stopTrace(handle: Long, attributes: TraceAttributes, callback: (Result<Unit>) -> Unit)
  fun startHttpMetric(options: HttpMetricOptions, callback: (Result<Long>) -> Unit)
  fun stopHttpMetric(handle: Long, attributes: HttpMetricAttributes, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by FirebasePerformanceHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebasePerformancePigeonCodec()
    }
    /** Sets up an instance of `FirebasePerformanceHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebasePerformanceHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.setPerformanceCollectionEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            api.setPerformanceCollectionEnabled(enabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.isPerformanceCollectionEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.isPerformanceCollectionEnabled{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.startTrace$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            api.startTrace(nameArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.stopTrace$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as Long
            val attributesArg = args[1] as TraceAttributes
            api.stopTrace(handleArg, attributesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.startHttpMetric$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as HttpMetricOptions
            api.startHttpMetric(optionsArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_performance_platform_interface.FirebasePerformanceHostApi.stopHttpMetric$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as Long
            val attributesArg = args[1] as HttpMetricAttributes
            api.stopHttpMetric(handleArg, attributesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebasePerformancePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
