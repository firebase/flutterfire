// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_performance_windows {

// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code) : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
      : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message,
                        const flutter::EncodableValue& details)
      : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template <class T>
class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FirebasePerformanceHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};

enum class HttpMethod {
  kConnect = 0,
  kDelete = 1,
  kGet = 2,
  kHead = 3,
  kOptions = 4,
  kPatch = 5,
  kPost = 6,
  kPut = 7,
  kTrace = 8
};

// Generated class from Pigeon that represents data sent in messages.
class HttpMetricOptions {
 public:
  // Constructs an object setting all fields.
  explicit HttpMetricOptions(const std::string& url,
                             const HttpMethod& http_method);

  const std::string& url() const;
  void set_url(std::string_view value_arg);

  const HttpMethod& http_method() const;
  void set_http_method(const HttpMethod& value_arg);

 private:
  static HttpMetricOptions FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebasePerformanceHostApi;
  friend class PigeonInternalCodecSerializer;
  std::string url_;
  HttpMethod http_method_;
};

// Generated class from Pigeon that represents data sent in messages.
class HttpMetricAttributes {
 public:
  // Constructs an object setting all non-nullable fields.
  HttpMetricAttributes();

  // Constructs an object setting all fields.
  explicit HttpMetricAttributes(const int64_t* http_response_code,
                                const int64_t* request_payload_size,
                                const int64_t* response_payload_size,
                                const std::string* response_content_type,
                                const flutter::EncodableMap* attributes);

  const int64_t* http_response_code() const;
  void set_http_response_code(const int64_t* value_arg);
  void set_http_response_code(int64_t value_arg);

  const int64_t* request_payload_size() const;
  void set_request_payload_size(const int64_t* value_arg);
  void set_request_payload_size(int64_t value_arg);

  const int64_t* response_payload_size() const;
  void set_response_payload_size(const int64_t* value_arg);
  void set_response_payload_size(int64_t value_arg);

  const std::string* response_content_type() const;
  void set_response_content_type(const std::string_view* value_arg);
  void set_response_content_type(std::string_view value_arg);

  const flutter::EncodableMap* attributes() const;
  void set_attributes(const flutter::EncodableMap* value_arg);
  void set_attributes(const flutter::EncodableMap& value_arg);

 private:
  static HttpMetricAttributes FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebasePerformanceHostApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<int64_t> http_response_code_;
  std::optional<int64_t> request_payload_size_;
  std::optional<int64_t> response_payload_size_;
  std::optional<std::string> response_content_type_;
  std::optional<flutter::EncodableMap> attributes_;
};

// Generated class from Pigeon that represents data sent in messages.
class TraceAttributes {
 public:
  // Constructs an object setting all non-nullable fields.
  TraceAttributes();

  // Constructs an object setting all fields.
  explicit TraceAttributes(const flutter::EncodableMap* metrics,
                           const flutter::EncodableMap* attributes);

  const flutter::EncodableMap* metrics() const;
  void set_metrics(const flutter::EncodableMap* value_arg);
  void set_metrics(const flutter::EncodableMap& value_arg);

  const flutter::EncodableMap* attributes() const;
  void set_attributes(const flutter::EncodableMap* value_arg);
  void set_attributes(const flutter::EncodableMap& value_arg);

 private:
  static TraceAttributes FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebasePerformanceHostApi;
  friend class PigeonInternalCodecSerializer;
  std::optional<flutter::EncodableMap> metrics_;
  std::optional<flutter::EncodableMap> attributes_;
};

class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(const flutter::EncodableValue& value,
                  flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
      uint8_t type, flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from
// Flutter.
class FirebasePerformanceHostApi {
 public:
  FirebasePerformanceHostApi(const FirebasePerformanceHostApi&) = delete;
  FirebasePerformanceHostApi& operator=(const FirebasePerformanceHostApi&) =
      delete;
  virtual ~FirebasePerformanceHostApi() {}
  virtual void SetPerformanceCollectionEnabled(
      bool enabled,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void IsPerformanceCollectionEnabled(
      std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual void StartTrace(
      const std::string& name,
      std::function<void(ErrorOr<int64_t> reply)> result) = 0;
  virtual void StopTrace(
      int64_t handle, const TraceAttributes& attributes,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void StartHttpMetric(
      const HttpMetricOptions& options,
      std::function<void(ErrorOr<int64_t> reply)> result) = 0;
  virtual void StopHttpMetric(
      int64_t handle, const HttpMetricAttributes& attributes,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;

  // The codec used by FirebasePerformanceHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FirebasePerformanceHostApi` to handle messages
  // through the `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    FirebasePerformanceHostApi* api);
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    FirebasePerformanceHostApi* api,
                    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  FirebasePerformanceHostApi() = default;
};
}  // namespace firebase_performance_windows
#endif  // PIGEON_MESSAGES_G_H_
