// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFirebaseRemoteConfigMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFirebaseRemoteConfigMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFirebaseRemoteConfigMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be
    // untrue.
    return false
  }
}

func deepHashFirebaseRemoteConfigMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
    for item in valueList {
      deepHashFirebaseRemoteConfigMessages(value: item, hasher: &hasher)
    }
    return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys {
      hasher.combine(key)
      deepHashFirebaseRemoteConfigMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

/// Generated class from Pigeon that represents data sent in messages.
struct RemoteConfigPigeonSettings: Hashable {
  var fetchTimeoutSeconds: Int64
  var minimumFetchIntervalSeconds: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> RemoteConfigPigeonSettings? {
    let fetchTimeoutSeconds = pigeonVar_list[0] as! Int64
    let minimumFetchIntervalSeconds = pigeonVar_list[1] as! Int64

    return RemoteConfigPigeonSettings(
      fetchTimeoutSeconds: fetchTimeoutSeconds,
      minimumFetchIntervalSeconds: minimumFetchIntervalSeconds
    )
  }

  func toList() -> [Any?] {
    [
      fetchTimeoutSeconds,
      minimumFetchIntervalSeconds,
    ]
  }

  static func == (lhs: RemoteConfigPigeonSettings, rhs: RemoteConfigPigeonSettings) -> Bool {
    deepEqualsFirebaseRemoteConfigMessages(lhs.toList(), rhs.toList())
  }

  func hash(into hasher: inout Hasher) {
    deepHashFirebaseRemoteConfigMessages(value: toList(), hasher: &hasher)
  }
}

private class FirebaseRemoteConfigMessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return RemoteConfigPigeonSettings.fromList(readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FirebaseRemoteConfigMessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RemoteConfigPigeonSettings {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FirebaseRemoteConfigMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    FirebaseRemoteConfigMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    FirebaseRemoteConfigMessagesPigeonCodecWriter(data: data)
  }
}

class FirebaseRemoteConfigMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared =
    FirebaseRemoteConfigMessagesPigeonCodec(
      readerWriter: FirebaseRemoteConfigMessagesPigeonCodecReaderWriter()
    )
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FirebaseRemoteConfigHostApi {
  func fetch(appName: String, completion: @escaping (Result<Void, Error>) -> Void)
  func fetchAndActivate(appName: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func activate(appName: String, completion: @escaping (Result<Bool, Error>) -> Void)
  func setConfigSettings(appName: String, settings: RemoteConfigPigeonSettings,
                         completion: @escaping (Result<Void, Error>) -> Void)
  func setDefaults(appName: String, defaultParameters: [String: Any?],
                   completion: @escaping (Result<Void, Error>) -> Void)
  func ensureInitialized(appName: String, completion: @escaping (Result<Void, Error>) -> Void)
  func setCustomSignals(appName: String, customSignals: [String: Any?],
                        completion: @escaping (Result<Void, Error>) -> Void)
  func getAll(appName: String, completion: @escaping (Result<[String: Any?], Error>) -> Void)
  func getProperties(appName: String, completion: @escaping (Result<[String: Any], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FirebaseRemoteConfigHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FirebaseRemoteConfigMessagesPigeonCodec.shared }
  /// Sets up an instance of `FirebaseRemoteConfigHostApi` to handle messages through the
  /// `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FirebaseRemoteConfigHostApi?,
                    messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let fetchChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.fetch\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      fetchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.fetch(appName: appNameArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchChannel.setMessageHandler(nil)
    }
    let fetchAndActivateChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.fetchAndActivate\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      fetchAndActivateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.fetchAndActivate(appName: appNameArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchAndActivateChannel.setMessageHandler(nil)
    }
    let activateChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.activate\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      activateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.activate(appName: appNameArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      activateChannel.setMessageHandler(nil)
    }
    let setConfigSettingsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.setConfigSettings\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setConfigSettingsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let settingsArg = args[1] as! RemoteConfigPigeonSettings
        api.setConfigSettings(appName: appNameArg, settings: settingsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setConfigSettingsChannel.setMessageHandler(nil)
    }
    let setDefaultsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.setDefaults\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setDefaultsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let defaultParametersArg = args[1] as! [String: Any?]
        api.setDefaults(appName: appNameArg, defaultParameters: defaultParametersArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setDefaultsChannel.setMessageHandler(nil)
    }
    let ensureInitializedChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.ensureInitialized\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      ensureInitializedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.ensureInitialized(appName: appNameArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ensureInitializedChannel.setMessageHandler(nil)
    }
    let setCustomSignalsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.setCustomSignals\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setCustomSignalsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        let customSignalsArg = args[1] as! [String: Any?]
        api.setCustomSignals(appName: appNameArg, customSignals: customSignalsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCustomSignalsChannel.setMessageHandler(nil)
    }
    let getAllChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.getAll\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      getAllChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.getAll(appName: appNameArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAllChannel.setMessageHandler(nil)
    }
    let getPropertiesChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_remote_config_platform_interface.FirebaseRemoteConfigHostApi.getProperties\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      getPropertiesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appNameArg = args[0] as! String
        api.getProperties(appName: appNameArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPropertiesChannel.setMessageHandler(nil)
    }
  }
}
