// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_analytics_windows {

// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code) : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
      : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message,
                        const flutter::EncodableValue& details)
      : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template <class T>
class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FirebaseAnalyticsHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};

// Generated class from Pigeon that represents data sent in messages.
class AnalyticsEvent {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit AnalyticsEvent(const std::string& name);

  // Constructs an object setting all fields.
  explicit AnalyticsEvent(const std::string& name,
                          const flutter::EncodableMap* parameters);

  const std::string& name() const;
  void set_name(std::string_view value_arg);

  const flutter::EncodableMap* parameters() const;
  void set_parameters(const flutter::EncodableMap* value_arg);
  void set_parameters(const flutter::EncodableMap& value_arg);

 private:
  static AnalyticsEvent FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseAnalyticsHostApi;
  friend class PigeonInternalCodecSerializer;
  std::string name_;
  std::optional<flutter::EncodableMap> parameters_;
};

class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(const flutter::EncodableValue& value,
                  flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
      uint8_t type, flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from
// Flutter.
class FirebaseAnalyticsHostApi {
 public:
  FirebaseAnalyticsHostApi(const FirebaseAnalyticsHostApi&) = delete;
  FirebaseAnalyticsHostApi& operator=(const FirebaseAnalyticsHostApi&) = delete;
  virtual ~FirebaseAnalyticsHostApi() {}
  virtual void LogEvent(
      const flutter::EncodableMap& event,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetUserId(
      const std::string* user_id,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetUserProperty(
      const std::string& name, const std::string* value,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetAnalyticsCollectionEnabled(
      bool enabled,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void ResetAnalyticsData(
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetSessionTimeoutDuration(
      int64_t timeout,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetConsent(
      const flutter::EncodableMap& consent,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void SetDefaultEventParameters(
      const flutter::EncodableMap* parameters,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void GetAppInstanceId(
      std::function<void(ErrorOr<std::optional<std::string>> reply)>
          result) = 0;
  virtual void GetSessionId(
      std::function<void(ErrorOr<std::optional<int64_t>> reply)> result) = 0;
  virtual void InitiateOnDeviceConversionMeasurement(
      const flutter::EncodableMap& arguments,
      std::function<void(std::optional<FlutterError> reply)> result) = 0;

  // The codec used by FirebaseAnalyticsHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FirebaseAnalyticsHostApi` to handle messages
  // through the `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    FirebaseAnalyticsHostApi* api);
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    FirebaseAnalyticsHostApi* api,
                    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  FirebaseAnalyticsHostApi() = default;
};
}  // namespace firebase_analytics_windows
#endif  // PIGEON_MESSAGES_G_H_
