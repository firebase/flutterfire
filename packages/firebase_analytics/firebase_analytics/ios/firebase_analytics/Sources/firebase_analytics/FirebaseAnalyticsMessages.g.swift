// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsFirebaseAnalyticsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsFirebaseAnalyticsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsFirebaseAnalyticsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be
    // untrue.
    return false
  }
}

func deepHashFirebaseAnalyticsMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
    for item in valueList {
      deepHashFirebaseAnalyticsMessages(value: item, hasher: &hasher)
    }
    return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys {
      hasher.combine(key)
      deepHashFirebaseAnalyticsMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

/// Generated class from Pigeon that represents data sent in messages.
struct AnalyticsEvent: Hashable {
  var name: String
  var parameters: [String?: Any?]? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AnalyticsEvent? {
    let name = pigeonVar_list[0] as! String
    let parameters: [String?: Any?]? = nilOrValue(pigeonVar_list[1])

    return AnalyticsEvent(
      name: name,
      parameters: parameters
    )
  }

  func toList() -> [Any?] {
    [
      name,
      parameters,
    ]
  }

  static func == (lhs: AnalyticsEvent, rhs: AnalyticsEvent) -> Bool {
    deepEqualsFirebaseAnalyticsMessages(lhs.toList(), rhs.toList())
  }

  func hash(into hasher: inout Hasher) {
    deepHashFirebaseAnalyticsMessages(value: toList(), hasher: &hasher)
  }
}

private class FirebaseAnalyticsMessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return AnalyticsEvent.fromList(readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FirebaseAnalyticsMessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AnalyticsEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FirebaseAnalyticsMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    FirebaseAnalyticsMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    FirebaseAnalyticsMessagesPigeonCodecWriter(data: data)
  }
}

class FirebaseAnalyticsMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared =
    FirebaseAnalyticsMessagesPigeonCodec(
      readerWriter: FirebaseAnalyticsMessagesPigeonCodecReaderWriter()
    )
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FirebaseAnalyticsHostApi {
  func logEvent(event: [String: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  func setUserId(userId: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func setUserProperty(name: String, value: String?,
                       completion: @escaping (Result<Void, Error>) -> Void)
  func setAnalyticsCollectionEnabled(enabled: Bool,
                                     completion: @escaping (Result<Void, Error>) -> Void)
  func resetAnalyticsData(completion: @escaping (Result<Void, Error>) -> Void)
  func setSessionTimeoutDuration(timeout: Int64,
                                 completion: @escaping (Result<Void, Error>) -> Void)
  func setConsent(consent: [String: Bool?], completion: @escaping (Result<Void, Error>) -> Void)
  func setDefaultEventParameters(parameters: [String: Any?]?,
                                 completion: @escaping (Result<Void, Error>) -> Void)
  func getAppInstanceId(completion: @escaping (Result<String?, Error>) -> Void)
  func getSessionId(completion: @escaping (Result<Int64?, Error>) -> Void)
  func initiateOnDeviceConversionMeasurement(arguments: [String: String?],
                                             completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FirebaseAnalyticsHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FirebaseAnalyticsMessagesPigeonCodec.shared }
  /// Sets up an instance of `FirebaseAnalyticsHostApi` to handle messages through the
  /// `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FirebaseAnalyticsHostApi?,
                    messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let logEventChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.logEvent\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      logEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventArg = args[0] as! [String: Any?]
        api.logEvent(event: eventArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      logEventChannel.setMessageHandler(nil)
    }
    let setUserIdChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setUserId\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setUserIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIdArg: String? = nilOrValue(args[0])
        api.setUserId(userId: userIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setUserIdChannel.setMessageHandler(nil)
    }
    let setUserPropertyChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setUserProperty\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setUserPropertyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        let valueArg: String? = nilOrValue(args[1])
        api.setUserProperty(name: nameArg, value: valueArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setUserPropertyChannel.setMessageHandler(nil)
    }
    let setAnalyticsCollectionEnabledChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setAnalyticsCollectionEnabled\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setAnalyticsCollectionEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        api.setAnalyticsCollectionEnabled(enabled: enabledArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setAnalyticsCollectionEnabledChannel.setMessageHandler(nil)
    }
    let resetAnalyticsDataChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.resetAnalyticsData\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      resetAnalyticsDataChannel.setMessageHandler { _, reply in
        api.resetAnalyticsData { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      resetAnalyticsDataChannel.setMessageHandler(nil)
    }
    let setSessionTimeoutDurationChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setSessionTimeoutDuration\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setSessionTimeoutDurationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let timeoutArg = args[0] as! Int64
        api.setSessionTimeoutDuration(timeout: timeoutArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setSessionTimeoutDurationChannel.setMessageHandler(nil)
    }
    let setConsentChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setConsent\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let consentArg = args[0] as! [String: Bool?]
        api.setConsent(consent: consentArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setConsentChannel.setMessageHandler(nil)
    }
    let setDefaultEventParametersChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.setDefaultEventParameters\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setDefaultEventParametersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let parametersArg: [String: Any?]? = nilOrValue(args[0])
        api.setDefaultEventParameters(parameters: parametersArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setDefaultEventParametersChannel.setMessageHandler(nil)
    }
    let getAppInstanceIdChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.getAppInstanceId\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      getAppInstanceIdChannel.setMessageHandler { _, reply in
        api.getAppInstanceId { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAppInstanceIdChannel.setMessageHandler(nil)
    }
    let getSessionIdChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.getSessionId\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      getSessionIdChannel.setMessageHandler { _, reply in
        api.getSessionId { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getSessionIdChannel.setMessageHandler(nil)
    }
    let initiateOnDeviceConversionMeasurementChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_analytics_platform_interface.FirebaseAnalyticsHostApi.initiateOnDeviceConversionMeasurement\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      initiateOnDeviceConversionMeasurementChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: String?]
        api.initiateOnDeviceConversionMeasurement(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initiateOnDeviceConversionMeasurementChannel.setMessageHandler(nil)
    }
  }
}
