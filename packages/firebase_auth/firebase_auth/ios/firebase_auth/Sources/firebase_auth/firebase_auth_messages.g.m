// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v19.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "include/Public/firebase_auth_messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

/// The type of operation that generated the action code from calling
/// [checkActionCode].
@implementation ActionCodeInfoOperationBox
- (instancetype)initWithValue:(ActionCodeInfoOperation)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface PigeonMultiFactorSession ()
+ (PigeonMultiFactorSession *)fromList:(NSArray *)list;
+ (nullable PigeonMultiFactorSession *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonPhoneMultiFactorAssertion ()
+ (PigeonPhoneMultiFactorAssertion *)fromList:(NSArray *)list;
+ (nullable PigeonPhoneMultiFactorAssertion *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonMultiFactorInfo ()
+ (PigeonMultiFactorInfo *)fromList:(NSArray *)list;
+ (nullable PigeonMultiFactorInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AuthPigeonFirebaseApp ()
+ (AuthPigeonFirebaseApp *)fromList:(NSArray *)list;
+ (nullable AuthPigeonFirebaseApp *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonActionCodeInfoData ()
+ (PigeonActionCodeInfoData *)fromList:(NSArray *)list;
+ (nullable PigeonActionCodeInfoData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonActionCodeInfo ()
+ (PigeonActionCodeInfo *)fromList:(NSArray *)list;
+ (nullable PigeonActionCodeInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonAdditionalUserInfo ()
+ (PigeonAdditionalUserInfo *)fromList:(NSArray *)list;
+ (nullable PigeonAdditionalUserInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonAuthCredential ()
+ (PigeonAuthCredential *)fromList:(NSArray *)list;
+ (nullable PigeonAuthCredential *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonUserInfo ()
+ (PigeonUserInfo *)fromList:(NSArray *)list;
+ (nullable PigeonUserInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonUserDetails ()
+ (PigeonUserDetails *)fromList:(NSArray *)list;
+ (nullable PigeonUserDetails *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonUserCredential ()
+ (PigeonUserCredential *)fromList:(NSArray *)list;
+ (nullable PigeonUserCredential *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonActionCodeSettings ()
+ (PigeonActionCodeSettings *)fromList:(NSArray *)list;
+ (nullable PigeonActionCodeSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonFirebaseAuthSettings ()
+ (PigeonFirebaseAuthSettings *)fromList:(NSArray *)list;
+ (nullable PigeonFirebaseAuthSettings *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonSignInProvider ()
+ (PigeonSignInProvider *)fromList:(NSArray *)list;
+ (nullable PigeonSignInProvider *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonVerifyPhoneNumberRequest ()
+ (PigeonVerifyPhoneNumberRequest *)fromList:(NSArray *)list;
+ (nullable PigeonVerifyPhoneNumberRequest *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonIdTokenResult ()
+ (PigeonIdTokenResult *)fromList:(NSArray *)list;
+ (nullable PigeonIdTokenResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonUserProfile ()
+ (PigeonUserProfile *)fromList:(NSArray *)list;
+ (nullable PigeonUserProfile *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PigeonTotpSecret ()
+ (PigeonTotpSecret *)fromList:(NSArray *)list;
+ (nullable PigeonTotpSecret *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation PigeonMultiFactorSession
+ (instancetype)makeWithId:(NSString *)id {
  PigeonMultiFactorSession *pigeonResult = [[PigeonMultiFactorSession alloc] init];
  pigeonResult.id = id;
  return pigeonResult;
}
+ (PigeonMultiFactorSession *)fromList:(NSArray *)list {
  PigeonMultiFactorSession *pigeonResult = [[PigeonMultiFactorSession alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PigeonMultiFactorSession *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonMultiFactorSession fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.id ?: [NSNull null],
  ];
}
@end

@implementation PigeonPhoneMultiFactorAssertion
+ (instancetype)makeWithVerificationId:(NSString *)verificationId
                      verificationCode:(NSString *)verificationCode {
  PigeonPhoneMultiFactorAssertion *pigeonResult = [[PigeonPhoneMultiFactorAssertion alloc] init];
  pigeonResult.verificationId = verificationId;
  pigeonResult.verificationCode = verificationCode;
  return pigeonResult;
}
+ (PigeonPhoneMultiFactorAssertion *)fromList:(NSArray *)list {
  PigeonPhoneMultiFactorAssertion *pigeonResult = [[PigeonPhoneMultiFactorAssertion alloc] init];
  pigeonResult.verificationId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.verificationCode = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonPhoneMultiFactorAssertion *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonPhoneMultiFactorAssertion fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.verificationId ?: [NSNull null],
    self.verificationCode ?: [NSNull null],
  ];
}
@end

@implementation PigeonMultiFactorInfo
+ (instancetype)makeWithDisplayName:(nullable NSString *)displayName
                enrollmentTimestamp:(double)enrollmentTimestamp
                           factorId:(nullable NSString *)factorId
                                uid:(NSString *)uid
                        phoneNumber:(nullable NSString *)phoneNumber {
  PigeonMultiFactorInfo *pigeonResult = [[PigeonMultiFactorInfo alloc] init];
  pigeonResult.displayName = displayName;
  pigeonResult.enrollmentTimestamp = enrollmentTimestamp;
  pigeonResult.factorId = factorId;
  pigeonResult.uid = uid;
  pigeonResult.phoneNumber = phoneNumber;
  return pigeonResult;
}
+ (PigeonMultiFactorInfo *)fromList:(NSArray *)list {
  PigeonMultiFactorInfo *pigeonResult = [[PigeonMultiFactorInfo alloc] init];
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.enrollmentTimestamp = [GetNullableObjectAtIndex(list, 1) doubleValue];
  pigeonResult.factorId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.uid = GetNullableObjectAtIndex(list, 3);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable PigeonMultiFactorInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonMultiFactorInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.displayName ?: [NSNull null],
    @(self.enrollmentTimestamp),
    self.factorId ?: [NSNull null],
    self.uid ?: [NSNull null],
    self.phoneNumber ?: [NSNull null],
  ];
}
@end

@implementation AuthPigeonFirebaseApp
+ (instancetype)makeWithAppName:(NSString *)appName
                       tenantId:(nullable NSString *)tenantId
               customAuthDomain:(nullable NSString *)customAuthDomain {
  AuthPigeonFirebaseApp *pigeonResult = [[AuthPigeonFirebaseApp alloc] init];
  pigeonResult.appName = appName;
  pigeonResult.tenantId = tenantId;
  pigeonResult.customAuthDomain = customAuthDomain;
  return pigeonResult;
}
+ (AuthPigeonFirebaseApp *)fromList:(NSArray *)list {
  AuthPigeonFirebaseApp *pigeonResult = [[AuthPigeonFirebaseApp alloc] init];
  pigeonResult.appName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.tenantId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.customAuthDomain = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AuthPigeonFirebaseApp *)nullableFromList:(NSArray *)list {
  return (list) ? [AuthPigeonFirebaseApp fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.appName ?: [NSNull null],
    self.tenantId ?: [NSNull null],
    self.customAuthDomain ?: [NSNull null],
  ];
}
@end

@implementation PigeonActionCodeInfoData
+ (instancetype)makeWithEmail:(nullable NSString *)email
                previousEmail:(nullable NSString *)previousEmail {
  PigeonActionCodeInfoData *pigeonResult = [[PigeonActionCodeInfoData alloc] init];
  pigeonResult.email = email;
  pigeonResult.previousEmail = previousEmail;
  return pigeonResult;
}
+ (PigeonActionCodeInfoData *)fromList:(NSArray *)list {
  PigeonActionCodeInfoData *pigeonResult = [[PigeonActionCodeInfoData alloc] init];
  pigeonResult.email = GetNullableObjectAtIndex(list, 0);
  pigeonResult.previousEmail = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonActionCodeInfoData *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonActionCodeInfoData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.email ?: [NSNull null],
    self.previousEmail ?: [NSNull null],
  ];
}
@end

@implementation PigeonActionCodeInfo
+ (instancetype)makeWithOperation:(ActionCodeInfoOperation)operation
                             data:(PigeonActionCodeInfoData *)data {
  PigeonActionCodeInfo *pigeonResult = [[PigeonActionCodeInfo alloc] init];
  pigeonResult.operation = operation;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (PigeonActionCodeInfo *)fromList:(NSArray *)list {
  PigeonActionCodeInfo *pigeonResult = [[PigeonActionCodeInfo alloc] init];
  pigeonResult.operation = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonActionCodeInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonActionCodeInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.operation),
    self.data ?: [NSNull null],
  ];
}
@end

@implementation PigeonAdditionalUserInfo
+ (instancetype)makeWithIsNewUser:(BOOL)isNewUser
                       providerId:(nullable NSString *)providerId
                         username:(nullable NSString *)username
                authorizationCode:(nullable NSString *)authorizationCode
                          profile:(nullable NSDictionary<NSString *, id> *)profile {
  PigeonAdditionalUserInfo *pigeonResult = [[PigeonAdditionalUserInfo alloc] init];
  pigeonResult.isNewUser = isNewUser;
  pigeonResult.providerId = providerId;
  pigeonResult.username = username;
  pigeonResult.authorizationCode = authorizationCode;
  pigeonResult.profile = profile;
  return pigeonResult;
}
+ (PigeonAdditionalUserInfo *)fromList:(NSArray *)list {
  PigeonAdditionalUserInfo *pigeonResult = [[PigeonAdditionalUserInfo alloc] init];
  pigeonResult.isNewUser = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.username = GetNullableObjectAtIndex(list, 2);
  pigeonResult.authorizationCode = GetNullableObjectAtIndex(list, 3);
  pigeonResult.profile = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable PigeonAdditionalUserInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonAdditionalUserInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.isNewUser),
    self.providerId ?: [NSNull null],
    self.username ?: [NSNull null],
    self.authorizationCode ?: [NSNull null],
    self.profile ?: [NSNull null],
  ];
}
@end

@implementation PigeonAuthCredential
+ (instancetype)makeWithProviderId:(NSString *)providerId
                      signInMethod:(NSString *)signInMethod
                          nativeId:(NSInteger)nativeId
                       accessToken:(nullable NSString *)accessToken {
  PigeonAuthCredential *pigeonResult = [[PigeonAuthCredential alloc] init];
  pigeonResult.providerId = providerId;
  pigeonResult.signInMethod = signInMethod;
  pigeonResult.nativeId = nativeId;
  pigeonResult.accessToken = accessToken;
  return pigeonResult;
}
+ (PigeonAuthCredential *)fromList:(NSArray *)list {
  PigeonAuthCredential *pigeonResult = [[PigeonAuthCredential alloc] init];
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.signInMethod = GetNullableObjectAtIndex(list, 1);
  pigeonResult.nativeId = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable PigeonAuthCredential *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonAuthCredential fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.providerId ?: [NSNull null],
    self.signInMethod ?: [NSNull null],
    @(self.nativeId),
    self.accessToken ?: [NSNull null],
  ];
}
@end

@implementation PigeonUserInfo
+ (instancetype)makeWithUid:(NSString *)uid
                      email:(nullable NSString *)email
                displayName:(nullable NSString *)displayName
                   photoUrl:(nullable NSString *)photoUrl
                phoneNumber:(nullable NSString *)phoneNumber
                isAnonymous:(BOOL)isAnonymous
            isEmailVerified:(BOOL)isEmailVerified
                 providerId:(nullable NSString *)providerId
                   tenantId:(nullable NSString *)tenantId
               refreshToken:(nullable NSString *)refreshToken
          creationTimestamp:(nullable NSNumber *)creationTimestamp
        lastSignInTimestamp:(nullable NSNumber *)lastSignInTimestamp {
  PigeonUserInfo *pigeonResult = [[PigeonUserInfo alloc] init];
  pigeonResult.uid = uid;
  pigeonResult.email = email;
  pigeonResult.displayName = displayName;
  pigeonResult.photoUrl = photoUrl;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.isAnonymous = isAnonymous;
  pigeonResult.isEmailVerified = isEmailVerified;
  pigeonResult.providerId = providerId;
  pigeonResult.tenantId = tenantId;
  pigeonResult.refreshToken = refreshToken;
  pigeonResult.creationTimestamp = creationTimestamp;
  pigeonResult.lastSignInTimestamp = lastSignInTimestamp;
  return pigeonResult;
}
+ (PigeonUserInfo *)fromList:(NSArray *)list {
  PigeonUserInfo *pigeonResult = [[PigeonUserInfo alloc] init];
  pigeonResult.uid = GetNullableObjectAtIndex(list, 0);
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 2);
  pigeonResult.photoUrl = GetNullableObjectAtIndex(list, 3);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 4);
  pigeonResult.isAnonymous = [GetNullableObjectAtIndex(list, 5) boolValue];
  pigeonResult.isEmailVerified = [GetNullableObjectAtIndex(list, 6) boolValue];
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 7);
  pigeonResult.tenantId = GetNullableObjectAtIndex(list, 8);
  pigeonResult.refreshToken = GetNullableObjectAtIndex(list, 9);
  pigeonResult.creationTimestamp = GetNullableObjectAtIndex(list, 10);
  pigeonResult.lastSignInTimestamp = GetNullableObjectAtIndex(list, 11);
  return pigeonResult;
}
+ (nullable PigeonUserInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonUserInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.uid ?: [NSNull null],
    self.email ?: [NSNull null],
    self.displayName ?: [NSNull null],
    self.photoUrl ?: [NSNull null],
    self.phoneNumber ?: [NSNull null],
    @(self.isAnonymous),
    @(self.isEmailVerified),
    self.providerId ?: [NSNull null],
    self.tenantId ?: [NSNull null],
    self.refreshToken ?: [NSNull null],
    self.creationTimestamp ?: [NSNull null],
    self.lastSignInTimestamp ?: [NSNull null],
  ];
}
@end

@implementation PigeonUserDetails
+ (instancetype)makeWithUserInfo:(PigeonUserInfo *)userInfo
                    providerData:(NSArray<NSDictionary<id, id> *> *)providerData {
  PigeonUserDetails *pigeonResult = [[PigeonUserDetails alloc] init];
  pigeonResult.userInfo = userInfo;
  pigeonResult.providerData = providerData;
  return pigeonResult;
}
+ (PigeonUserDetails *)fromList:(NSArray *)list {
  PigeonUserDetails *pigeonResult = [[PigeonUserDetails alloc] init];
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 0);
  pigeonResult.providerData = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable PigeonUserDetails *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonUserDetails fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.userInfo ?: [NSNull null],
    self.providerData ?: [NSNull null],
  ];
}
@end

@implementation PigeonUserCredential
+ (instancetype)makeWithUser:(nullable PigeonUserDetails *)user
          additionalUserInfo:(nullable PigeonAdditionalUserInfo *)additionalUserInfo
                  credential:(nullable PigeonAuthCredential *)credential {
  PigeonUserCredential *pigeonResult = [[PigeonUserCredential alloc] init];
  pigeonResult.user = user;
  pigeonResult.additionalUserInfo = additionalUserInfo;
  pigeonResult.credential = credential;
  return pigeonResult;
}
+ (PigeonUserCredential *)fromList:(NSArray *)list {
  PigeonUserCredential *pigeonResult = [[PigeonUserCredential alloc] init];
  pigeonResult.user = GetNullableObjectAtIndex(list, 0);
  pigeonResult.additionalUserInfo = GetNullableObjectAtIndex(list, 1);
  pigeonResult.credential = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable PigeonUserCredential *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonUserCredential fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.user ?: [NSNull null],
    self.additionalUserInfo ?: [NSNull null],
    self.credential ?: [NSNull null],
  ];
}
@end

@implementation PigeonActionCodeSettings
+ (instancetype)makeWithUrl:(NSString *)url
          dynamicLinkDomain:(nullable NSString *)dynamicLinkDomain
            handleCodeInApp:(BOOL)handleCodeInApp
                iOSBundleId:(nullable NSString *)iOSBundleId
         androidPackageName:(nullable NSString *)androidPackageName
          androidInstallApp:(BOOL)androidInstallApp
      androidMinimumVersion:(nullable NSString *)androidMinimumVersion {
  PigeonActionCodeSettings *pigeonResult = [[PigeonActionCodeSettings alloc] init];
  pigeonResult.url = url;
  pigeonResult.dynamicLinkDomain = dynamicLinkDomain;
  pigeonResult.handleCodeInApp = handleCodeInApp;
  pigeonResult.iOSBundleId = iOSBundleId;
  pigeonResult.androidPackageName = androidPackageName;
  pigeonResult.androidInstallApp = androidInstallApp;
  pigeonResult.androidMinimumVersion = androidMinimumVersion;
  return pigeonResult;
}
+ (PigeonActionCodeSettings *)fromList:(NSArray *)list {
  PigeonActionCodeSettings *pigeonResult = [[PigeonActionCodeSettings alloc] init];
  pigeonResult.url = GetNullableObjectAtIndex(list, 0);
  pigeonResult.dynamicLinkDomain = GetNullableObjectAtIndex(list, 1);
  pigeonResult.handleCodeInApp = [GetNullableObjectAtIndex(list, 2) boolValue];
  pigeonResult.iOSBundleId = GetNullableObjectAtIndex(list, 3);
  pigeonResult.androidPackageName = GetNullableObjectAtIndex(list, 4);
  pigeonResult.androidInstallApp = [GetNullableObjectAtIndex(list, 5) boolValue];
  pigeonResult.androidMinimumVersion = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable PigeonActionCodeSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonActionCodeSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.url ?: [NSNull null],
    self.dynamicLinkDomain ?: [NSNull null],
    @(self.handleCodeInApp),
    self.iOSBundleId ?: [NSNull null],
    self.androidPackageName ?: [NSNull null],
    @(self.androidInstallApp),
    self.androidMinimumVersion ?: [NSNull null],
  ];
}
@end

@implementation PigeonFirebaseAuthSettings
+ (instancetype)makeWithAppVerificationDisabledForTesting:(BOOL)appVerificationDisabledForTesting
                                          userAccessGroup:(nullable NSString *)userAccessGroup
                                              phoneNumber:(nullable NSString *)phoneNumber
                                                  smsCode:(nullable NSString *)smsCode
                                       forceRecaptchaFlow:(nullable NSNumber *)forceRecaptchaFlow {
  PigeonFirebaseAuthSettings *pigeonResult = [[PigeonFirebaseAuthSettings alloc] init];
  pigeonResult.appVerificationDisabledForTesting = appVerificationDisabledForTesting;
  pigeonResult.userAccessGroup = userAccessGroup;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.smsCode = smsCode;
  pigeonResult.forceRecaptchaFlow = forceRecaptchaFlow;
  return pigeonResult;
}
+ (PigeonFirebaseAuthSettings *)fromList:(NSArray *)list {
  PigeonFirebaseAuthSettings *pigeonResult = [[PigeonFirebaseAuthSettings alloc] init];
  pigeonResult.appVerificationDisabledForTesting = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.userAccessGroup = GetNullableObjectAtIndex(list, 1);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 2);
  pigeonResult.smsCode = GetNullableObjectAtIndex(list, 3);
  pigeonResult.forceRecaptchaFlow = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable PigeonFirebaseAuthSettings *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonFirebaseAuthSettings fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.appVerificationDisabledForTesting),
    self.userAccessGroup ?: [NSNull null],
    self.phoneNumber ?: [NSNull null],
    self.smsCode ?: [NSNull null],
    self.forceRecaptchaFlow ?: [NSNull null],
  ];
}
@end

@implementation PigeonSignInProvider
+ (instancetype)makeWithProviderId:(NSString *)providerId
                            scopes:(nullable NSArray<NSString *> *)scopes
                  customParameters:
                      (nullable NSDictionary<NSString *, NSString *> *)customParameters {
  PigeonSignInProvider *pigeonResult = [[PigeonSignInProvider alloc] init];
  pigeonResult.providerId = providerId;
  pigeonResult.scopes = scopes;
  pigeonResult.customParameters = customParameters;
  return pigeonResult;
}
+ (PigeonSignInProvider *)fromList:(NSArray *)list {
  PigeonSignInProvider *pigeonResult = [[PigeonSignInProvider alloc] init];
  pigeonResult.providerId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.scopes = GetNullableObjectAtIndex(list, 1);
  pigeonResult.customParameters = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable PigeonSignInProvider *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonSignInProvider fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.providerId ?: [NSNull null],
    self.scopes ?: [NSNull null],
    self.customParameters ?: [NSNull null],
  ];
}
@end

@implementation PigeonVerifyPhoneNumberRequest
+ (instancetype)makeWithPhoneNumber:(nullable NSString *)phoneNumber
                            timeout:(NSInteger)timeout
                forceResendingToken:(nullable NSNumber *)forceResendingToken
     autoRetrievedSmsCodeForTesting:(nullable NSString *)autoRetrievedSmsCodeForTesting
                  multiFactorInfoId:(nullable NSString *)multiFactorInfoId
               multiFactorSessionId:(nullable NSString *)multiFactorSessionId {
  PigeonVerifyPhoneNumberRequest *pigeonResult = [[PigeonVerifyPhoneNumberRequest alloc] init];
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.timeout = timeout;
  pigeonResult.forceResendingToken = forceResendingToken;
  pigeonResult.autoRetrievedSmsCodeForTesting = autoRetrievedSmsCodeForTesting;
  pigeonResult.multiFactorInfoId = multiFactorInfoId;
  pigeonResult.multiFactorSessionId = multiFactorSessionId;
  return pigeonResult;
}
+ (PigeonVerifyPhoneNumberRequest *)fromList:(NSArray *)list {
  PigeonVerifyPhoneNumberRequest *pigeonResult = [[PigeonVerifyPhoneNumberRequest alloc] init];
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 0);
  pigeonResult.timeout = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.forceResendingToken = GetNullableObjectAtIndex(list, 2);
  pigeonResult.autoRetrievedSmsCodeForTesting = GetNullableObjectAtIndex(list, 3);
  pigeonResult.multiFactorInfoId = GetNullableObjectAtIndex(list, 4);
  pigeonResult.multiFactorSessionId = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable PigeonVerifyPhoneNumberRequest *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonVerifyPhoneNumberRequest fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.phoneNumber ?: [NSNull null],
    @(self.timeout),
    self.forceResendingToken ?: [NSNull null],
    self.autoRetrievedSmsCodeForTesting ?: [NSNull null],
    self.multiFactorInfoId ?: [NSNull null],
    self.multiFactorSessionId ?: [NSNull null],
  ];
}
@end

@implementation PigeonIdTokenResult
+ (instancetype)makeWithToken:(nullable NSString *)token
          expirationTimestamp:(nullable NSNumber *)expirationTimestamp
                authTimestamp:(nullable NSNumber *)authTimestamp
            issuedAtTimestamp:(nullable NSNumber *)issuedAtTimestamp
               signInProvider:(nullable NSString *)signInProvider
                       claims:(nullable NSDictionary<NSString *, id> *)claims
           signInSecondFactor:(nullable NSString *)signInSecondFactor {
  PigeonIdTokenResult *pigeonResult = [[PigeonIdTokenResult alloc] init];
  pigeonResult.token = token;
  pigeonResult.expirationTimestamp = expirationTimestamp;
  pigeonResult.authTimestamp = authTimestamp;
  pigeonResult.issuedAtTimestamp = issuedAtTimestamp;
  pigeonResult.signInProvider = signInProvider;
  pigeonResult.claims = claims;
  pigeonResult.signInSecondFactor = signInSecondFactor;
  return pigeonResult;
}
+ (PigeonIdTokenResult *)fromList:(NSArray *)list {
  PigeonIdTokenResult *pigeonResult = [[PigeonIdTokenResult alloc] init];
  pigeonResult.token = GetNullableObjectAtIndex(list, 0);
  pigeonResult.expirationTimestamp = GetNullableObjectAtIndex(list, 1);
  pigeonResult.authTimestamp = GetNullableObjectAtIndex(list, 2);
  pigeonResult.issuedAtTimestamp = GetNullableObjectAtIndex(list, 3);
  pigeonResult.signInProvider = GetNullableObjectAtIndex(list, 4);
  pigeonResult.claims = GetNullableObjectAtIndex(list, 5);
  pigeonResult.signInSecondFactor = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable PigeonIdTokenResult *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonIdTokenResult fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.token ?: [NSNull null],
    self.expirationTimestamp ?: [NSNull null],
    self.authTimestamp ?: [NSNull null],
    self.issuedAtTimestamp ?: [NSNull null],
    self.signInProvider ?: [NSNull null],
    self.claims ?: [NSNull null],
    self.signInSecondFactor ?: [NSNull null],
  ];
}
@end

@implementation PigeonUserProfile
+ (instancetype)makeWithDisplayName:(nullable NSString *)displayName
                           photoUrl:(nullable NSString *)photoUrl
                 displayNameChanged:(BOOL)displayNameChanged
                    photoUrlChanged:(BOOL)photoUrlChanged {
  PigeonUserProfile *pigeonResult = [[PigeonUserProfile alloc] init];
  pigeonResult.displayName = displayName;
  pigeonResult.photoUrl = photoUrl;
  pigeonResult.displayNameChanged = displayNameChanged;
  pigeonResult.photoUrlChanged = photoUrlChanged;
  return pigeonResult;
}
+ (PigeonUserProfile *)fromList:(NSArray *)list {
  PigeonUserProfile *pigeonResult = [[PigeonUserProfile alloc] init];
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.photoUrl = GetNullableObjectAtIndex(list, 1);
  pigeonResult.displayNameChanged = [GetNullableObjectAtIndex(list, 2) boolValue];
  pigeonResult.photoUrlChanged = [GetNullableObjectAtIndex(list, 3) boolValue];
  return pigeonResult;
}
+ (nullable PigeonUserProfile *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonUserProfile fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.displayName ?: [NSNull null],
    self.photoUrl ?: [NSNull null],
    @(self.displayNameChanged),
    @(self.photoUrlChanged),
  ];
}
@end

@implementation PigeonTotpSecret
+ (instancetype)makeWithCodeIntervalSeconds:(nullable NSNumber *)codeIntervalSeconds
                                 codeLength:(nullable NSNumber *)codeLength
               enrollmentCompletionDeadline:(nullable NSNumber *)enrollmentCompletionDeadline
                           hashingAlgorithm:(nullable NSString *)hashingAlgorithm
                                  secretKey:(NSString *)secretKey {
  PigeonTotpSecret *pigeonResult = [[PigeonTotpSecret alloc] init];
  pigeonResult.codeIntervalSeconds = codeIntervalSeconds;
  pigeonResult.codeLength = codeLength;
  pigeonResult.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
  pigeonResult.hashingAlgorithm = hashingAlgorithm;
  pigeonResult.secretKey = secretKey;
  return pigeonResult;
}
+ (PigeonTotpSecret *)fromList:(NSArray *)list {
  PigeonTotpSecret *pigeonResult = [[PigeonTotpSecret alloc] init];
  pigeonResult.codeIntervalSeconds = GetNullableObjectAtIndex(list, 0);
  pigeonResult.codeLength = GetNullableObjectAtIndex(list, 1);
  pigeonResult.enrollmentCompletionDeadline = GetNullableObjectAtIndex(list, 2);
  pigeonResult.hashingAlgorithm = GetNullableObjectAtIndex(list, 3);
  pigeonResult.secretKey = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable PigeonTotpSecret *)nullableFromList:(NSArray *)list {
  return (list) ? [PigeonTotpSecret fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.codeIntervalSeconds ?: [NSNull null],
    self.codeLength ?: [NSNull null],
    self.enrollmentCompletionDeadline ?: [NSNull null],
    self.hashingAlgorithm ?: [NSNull null],
    self.secretKey ?: [NSNull null],
  ];
}
@end

@interface FirebaseAuthHostApiCodecReader : FlutterStandardReader
@end
@implementation FirebaseAuthHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [AuthPigeonFirebaseApp fromList:[self readValue]];
    case 129:
      return [PigeonActionCodeInfo fromList:[self readValue]];
    case 130:
      return [PigeonActionCodeInfoData fromList:[self readValue]];
    case 131:
      return [PigeonActionCodeSettings fromList:[self readValue]];
    case 132:
      return [PigeonAdditionalUserInfo fromList:[self readValue]];
    case 133:
      return [PigeonAuthCredential fromList:[self readValue]];
    case 134:
      return [PigeonFirebaseAuthSettings fromList:[self readValue]];
    case 135:
      return [PigeonIdTokenResult fromList:[self readValue]];
    case 136:
      return [PigeonMultiFactorInfo fromList:[self readValue]];
    case 137:
      return [PigeonMultiFactorSession fromList:[self readValue]];
    case 138:
      return [PigeonPhoneMultiFactorAssertion fromList:[self readValue]];
    case 139:
      return [PigeonSignInProvider fromList:[self readValue]];
    case 140:
      return [PigeonTotpSecret fromList:[self readValue]];
    case 141:
      return [PigeonUserCredential fromList:[self readValue]];
    case 142:
      return [PigeonUserDetails fromList:[self readValue]];
    case 143:
      return [PigeonUserInfo fromList:[self readValue]];
    case 144:
      return [PigeonUserProfile fromList:[self readValue]];
    case 145:
      return [PigeonVerifyPhoneNumberRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FirebaseAuthHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FirebaseAuthHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AuthPigeonFirebaseApp class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeInfoData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeSettings class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonAdditionalUserInfo class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonAuthCredential class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonFirebaseAuthSettings class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonIdTokenResult class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorInfo class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorSession class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonPhoneMultiFactorAssertion class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonSignInProvider class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonTotpSecret class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserCredential class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserDetails class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserInfo class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserProfile class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonVerifyPhoneNumberRequest class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FirebaseAuthHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FirebaseAuthHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FirebaseAuthHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FirebaseAuthHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FirebaseAuthHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FirebaseAuthHostApiCodecReaderWriter *readerWriter =
        [[FirebaseAuthHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFirebaseAuthHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                              NSObject<FirebaseAuthHostApi> *api) {
  SetUpFirebaseAuthHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFirebaseAuthHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                        NSObject<FirebaseAuthHostApi> *api,
                                        NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.registerIdTokenListener",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerIdTokenListenerApp:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(registerIdTokenListenerApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api registerIdTokenListenerApp:arg_app
                             completion:^(NSString *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.registerAuthStateListener",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerAuthStateListenerApp:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(registerAuthStateListenerApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api registerAuthStateListenerApp:arg_app
                               completion:^(NSString *_Nullable output,
                                            FlutterError *_Nullable error) {
                                 callback(wrapResult(output, error));
                               }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.useEmulator",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(useEmulatorApp:host:port:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(useEmulatorApp:host:port:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_host = GetNullableObjectAtIndex(args, 1);
        NSInteger arg_port = [GetNullableObjectAtIndex(args, 2) integerValue];
        [api useEmulatorApp:arg_app
                       host:arg_host
                       port:arg_port
                 completion:^(FlutterError *_Nullable error) {
                   callback(wrapResult(nil, error));
                 }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.applyActionCode",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(applyActionCodeApp:code:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(applyActionCodeApp:code:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_code = GetNullableObjectAtIndex(args, 1);
        [api applyActionCodeApp:arg_app
                           code:arg_code
                     completion:^(FlutterError *_Nullable error) {
                       callback(wrapResult(nil, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.checkActionCode",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(checkActionCodeApp:code:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(checkActionCodeApp:code:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_code = GetNullableObjectAtIndex(args, 1);
        [api checkActionCodeApp:arg_app
                           code:arg_code
                     completion:^(PigeonActionCodeInfo *_Nullable output,
                                  FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.confirmPasswordReset",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(confirmPasswordResetApp:
                                                                     code:newPassword:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(confirmPasswordResetApp:code:newPassword:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_code = GetNullableObjectAtIndex(args, 1);
        NSString *arg_newPassword = GetNullableObjectAtIndex(args, 2);
        [api confirmPasswordResetApp:arg_app
                                code:arg_code
                         newPassword:arg_newPassword
                          completion:^(FlutterError *_Nullable error) {
                            callback(wrapResult(nil, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.createUserWithEmailAndPassword",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (createUserWithEmailAndPasswordApp:email:password:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(createUserWithEmailAndPasswordApp:email:password:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        NSString *arg_password = GetNullableObjectAtIndex(args, 2);
        [api createUserWithEmailAndPasswordApp:arg_app
                                         email:arg_email
                                      password:arg_password
                                    completion:^(PigeonUserCredential *_Nullable output,
                                                 FlutterError *_Nullable error) {
                                      callback(wrapResult(output, error));
                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInAnonymously",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInAnonymouslyApp:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInAnonymouslyApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api signInAnonymouslyApp:arg_app
                       completion:^(PigeonUserCredential *_Nullable output,
                                    FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInWithCredential",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithCredentialApp:input:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInWithCredentialApp:input:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_input = GetNullableObjectAtIndex(args, 1);
        [api signInWithCredentialApp:arg_app
                               input:arg_input
                          completion:^(PigeonUserCredential *_Nullable output,
                                       FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInWithCustomToken",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithCustomTokenApp:token:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInWithCustomTokenApp:token:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_token = GetNullableObjectAtIndex(args, 1);
        [api signInWithCustomTokenApp:arg_app
                                token:arg_token
                           completion:^(PigeonUserCredential *_Nullable output,
                                        FlutterError *_Nullable error) {
                             callback(wrapResult(output, error));
                           }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInWithEmailAndPassword",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (signInWithEmailAndPasswordApp:email:password:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInWithEmailAndPasswordApp:email:password:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        NSString *arg_password = GetNullableObjectAtIndex(args, 2);
        [api signInWithEmailAndPasswordApp:arg_app
                                     email:arg_email
                                  password:arg_password
                                completion:^(PigeonUserCredential *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInWithEmailLink",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithEmailLinkApp:
                                                                   email:emailLink:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInWithEmailLinkApp:email:emailLink:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        NSString *arg_emailLink = GetNullableObjectAtIndex(args, 2);
        [api signInWithEmailLinkApp:arg_app
                              email:arg_email
                          emailLink:arg_emailLink
                         completion:^(PigeonUserCredential *_Nullable output,
                                      FlutterError *_Nullable error) {
                           callback(wrapResult(output, error));
                         }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.signInWithProvider",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithProviderApp:
                                                         signInProvider:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(signInWithProviderApp:signInProvider:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonSignInProvider *arg_signInProvider = GetNullableObjectAtIndex(args, 1);
        [api signInWithProviderApp:arg_app
                    signInProvider:arg_signInProvider
                        completion:^(PigeonUserCredential *_Nullable output,
                                     FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.signOut",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(signOutApp:completion:)],
          @"FirebaseAuthHostApi api (%@) doesn't respond to @selector(signOutApp:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api signOutApp:arg_app
             completion:^(FlutterError *_Nullable error) {
               callback(wrapResult(nil, error));
             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.fetchSignInMethodsForEmail",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchSignInMethodsForEmailApp:email:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(fetchSignInMethodsForEmailApp:email:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        [api fetchSignInMethodsForEmailApp:arg_app
                                     email:arg_email
                                completion:^(NSArray<NSString *> *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.sendPasswordResetEmail",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (sendPasswordResetEmailApp:email:actionCodeSettings:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(sendPasswordResetEmailApp:email:actionCodeSettings:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        PigeonActionCodeSettings *arg_actionCodeSettings = GetNullableObjectAtIndex(args, 2);
        [api sendPasswordResetEmailApp:arg_app
                                 email:arg_email
                    actionCodeSettings:arg_actionCodeSettings
                            completion:^(FlutterError *_Nullable error) {
                              callback(wrapResult(nil, error));
                            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.sendSignInLinkToEmail",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (sendSignInLinkToEmailApp:email:actionCodeSettings:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(sendSignInLinkToEmailApp:email:actionCodeSettings:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_email = GetNullableObjectAtIndex(args, 1);
        PigeonActionCodeSettings *arg_actionCodeSettings = GetNullableObjectAtIndex(args, 2);
        [api sendSignInLinkToEmailApp:arg_app
                                email:arg_email
                   actionCodeSettings:arg_actionCodeSettings
                           completion:^(FlutterError *_Nullable error) {
                             callback(wrapResult(nil, error));
                           }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.setLanguageCode",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLanguageCodeApp:languageCode:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(setLanguageCodeApp:languageCode:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_languageCode = GetNullableObjectAtIndex(args, 1);
        [api setLanguageCodeApp:arg_app
                   languageCode:arg_languageCode
                     completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                       callback(wrapResult(output, error));
                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthHostApi.setSettings",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSettingsApp:settings:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(setSettingsApp:settings:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonFirebaseAuthSettings *arg_settings = GetNullableObjectAtIndex(args, 1);
        [api setSettingsApp:arg_app
                   settings:arg_settings
                 completion:^(FlutterError *_Nullable error) {
                   callback(wrapResult(nil, error));
                 }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.verifyPasswordResetCode",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(verifyPasswordResetCodeApp:code:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(verifyPasswordResetCodeApp:code:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_code = GetNullableObjectAtIndex(args, 1);
        [api verifyPasswordResetCodeApp:arg_app
                                   code:arg_code
                             completion:^(NSString *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthHostApi.verifyPhoneNumber",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(verifyPhoneNumberApp:request:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(verifyPhoneNumberApp:request:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonVerifyPhoneNumberRequest *arg_request = GetNullableObjectAtIndex(args, 1);
        [api verifyPhoneNumberApp:arg_app
                          request:arg_request
                       completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                          @"FirebaseAuthHostApi.revokeTokenWithAuthorizationCode",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(revokeTokenWithAuthorizationCodeApp:
                                                                    authorizationCode:completion:)],
                @"FirebaseAuthHostApi api (%@) doesn't respond to "
                @"@selector(revokeTokenWithAuthorizationCodeApp:authorizationCode:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_authorizationCode = GetNullableObjectAtIndex(args, 1);
        [api revokeTokenWithAuthorizationCodeApp:arg_app
                               authorizationCode:arg_authorizationCode
                                      completion:^(FlutterError *_Nullable error) {
                                        callback(wrapResult(nil, error));
                                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FirebaseAuthUserHostApiCodecReader : FlutterStandardReader
@end
@implementation FirebaseAuthUserHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [AuthPigeonFirebaseApp fromList:[self readValue]];
    case 129:
      return [PigeonActionCodeInfo fromList:[self readValue]];
    case 130:
      return [PigeonActionCodeInfoData fromList:[self readValue]];
    case 131:
      return [PigeonActionCodeSettings fromList:[self readValue]];
    case 132:
      return [PigeonAdditionalUserInfo fromList:[self readValue]];
    case 133:
      return [PigeonAuthCredential fromList:[self readValue]];
    case 134:
      return [PigeonFirebaseAuthSettings fromList:[self readValue]];
    case 135:
      return [PigeonIdTokenResult fromList:[self readValue]];
    case 136:
      return [PigeonMultiFactorInfo fromList:[self readValue]];
    case 137:
      return [PigeonMultiFactorSession fromList:[self readValue]];
    case 138:
      return [PigeonPhoneMultiFactorAssertion fromList:[self readValue]];
    case 139:
      return [PigeonSignInProvider fromList:[self readValue]];
    case 140:
      return [PigeonTotpSecret fromList:[self readValue]];
    case 141:
      return [PigeonUserCredential fromList:[self readValue]];
    case 142:
      return [PigeonUserDetails fromList:[self readValue]];
    case 143:
      return [PigeonUserInfo fromList:[self readValue]];
    case 144:
      return [PigeonUserProfile fromList:[self readValue]];
    case 145:
      return [PigeonVerifyPhoneNumberRequest fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FirebaseAuthUserHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FirebaseAuthUserHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AuthPigeonFirebaseApp class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeInfoData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonActionCodeSettings class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonAdditionalUserInfo class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonAuthCredential class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonFirebaseAuthSettings class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonIdTokenResult class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorInfo class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorSession class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonPhoneMultiFactorAssertion class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonSignInProvider class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonTotpSecret class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserCredential class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserDetails class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserInfo class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserProfile class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonVerifyPhoneNumberRequest class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FirebaseAuthUserHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FirebaseAuthUserHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FirebaseAuthUserHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FirebaseAuthUserHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FirebaseAuthUserHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FirebaseAuthUserHostApiCodecReaderWriter *readerWriter =
        [[FirebaseAuthUserHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpFirebaseAuthUserHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                  NSObject<FirebaseAuthUserHostApi> *api) {
  SetUpFirebaseAuthUserHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFirebaseAuthUserHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                            NSObject<FirebaseAuthUserHostApi> *api,
                                            NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthUserHostApi.delete",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(deleteApp:completion:)],
          @"FirebaseAuthUserHostApi api (%@) doesn't respond to @selector(deleteApp:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api deleteApp:arg_app
            completion:^(FlutterError *_Nullable error) {
              callback(wrapResult(nil, error));
            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthUserHostApi.getIdToken",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIdTokenApp:forceRefresh:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(getIdTokenApp:forceRefresh:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        BOOL arg_forceRefresh = [GetNullableObjectAtIndex(args, 1) boolValue];
        [api getIdTokenApp:arg_app
              forceRefresh:arg_forceRefresh
                completion:^(PigeonIdTokenResult *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.linkWithCredential",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(linkWithCredentialApp:input:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(linkWithCredentialApp:input:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_input = GetNullableObjectAtIndex(args, 1);
        [api linkWithCredentialApp:arg_app
                             input:arg_input
                        completion:^(PigeonUserCredential *_Nullable output,
                                     FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.linkWithProvider",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(linkWithProviderApp:signInProvider:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(linkWithProviderApp:signInProvider:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonSignInProvider *arg_signInProvider = GetNullableObjectAtIndex(args, 1);
        [api linkWithProviderApp:arg_app
                  signInProvider:arg_signInProvider
                      completion:^(PigeonUserCredential *_Nullable output,
                                   FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString stringWithFormat:@"%@%@",
                                          @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                          @"FirebaseAuthUserHostApi.reauthenticateWithCredential",
                                          messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reauthenticateWithCredentialApp:
                                                                            input:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(reauthenticateWithCredentialApp:input:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_input = GetNullableObjectAtIndex(args, 1);
        [api reauthenticateWithCredentialApp:arg_app
                                       input:arg_input
                                  completion:^(PigeonUserCredential *_Nullable output,
                                               FlutterError *_Nullable error) {
                                    callback(wrapResult(output, error));
                                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.reauthenticateWithProvider",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reauthenticateWithProviderApp:
                                                                 signInProvider:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(reauthenticateWithProviderApp:signInProvider:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonSignInProvider *arg_signInProvider = GetNullableObjectAtIndex(args, 1);
        [api reauthenticateWithProviderApp:arg_app
                            signInProvider:arg_signInProvider
                                completion:^(PigeonUserCredential *_Nullable output,
                                             FlutterError *_Nullable error) {
                                  callback(wrapResult(output, error));
                                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthUserHostApi.reload",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(reloadApp:completion:)],
          @"FirebaseAuthUserHostApi api (%@) doesn't respond to @selector(reloadApp:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api reloadApp:arg_app
            completion:^(PigeonUserDetails *_Nullable output, FlutterError *_Nullable error) {
              callback(wrapResult(output, error));
            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.sendEmailVerification",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEmailVerificationApp:
                                                        actionCodeSettings:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(sendEmailVerificationApp:actionCodeSettings:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonActionCodeSettings *arg_actionCodeSettings = GetNullableObjectAtIndex(args, 1);
        [api sendEmailVerificationApp:arg_app
                   actionCodeSettings:arg_actionCodeSettings
                           completion:^(FlutterError *_Nullable error) {
                             callback(wrapResult(nil, error));
                           }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthUserHostApi.unlink",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(unlinkApp:providerId:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(unlinkApp:providerId:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_providerId = GetNullableObjectAtIndex(args, 1);
        [api unlinkApp:arg_app
            providerId:arg_providerId
            completion:^(PigeonUserCredential *_Nullable output, FlutterError *_Nullable error) {
              callback(wrapResult(output, error));
            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.FirebaseAuthUserHostApi.updateEmail",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateEmailApp:newEmail:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(updateEmailApp:newEmail:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_newEmail = GetNullableObjectAtIndex(args, 1);
        [api updateEmailApp:arg_app
                   newEmail:arg_newEmail
                 completion:^(PigeonUserDetails *_Nullable output, FlutterError *_Nullable error) {
                   callback(wrapResult(output, error));
                 }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.updatePassword",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePasswordApp:newPassword:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(updatePasswordApp:newPassword:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_newPassword = GetNullableObjectAtIndex(args, 1);
        [api updatePasswordApp:arg_app
                   newPassword:arg_newPassword
                    completion:^(PigeonUserDetails *_Nullable output,
                                 FlutterError *_Nullable error) {
                      callback(wrapResult(output, error));
                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.updatePhoneNumber",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePhoneNumberApp:input:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(updatePhoneNumberApp:input:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSDictionary<NSString *, id> *arg_input = GetNullableObjectAtIndex(args, 1);
        [api updatePhoneNumberApp:arg_app
                            input:arg_input
                       completion:^(PigeonUserDetails *_Nullable output,
                                    FlutterError *_Nullable error) {
                         callback(wrapResult(output, error));
                       }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.updateProfile",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateProfileApp:profile:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(updateProfileApp:profile:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonUserProfile *arg_profile = GetNullableObjectAtIndex(args, 1);
        [api
            updateProfileApp:arg_app
                     profile:arg_profile
                  completion:^(PigeonUserDetails *_Nullable output, FlutterError *_Nullable error) {
                    callback(wrapResult(output, error));
                  }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"FirebaseAuthUserHostApi.verifyBeforeUpdateEmail",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FirebaseAuthUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (verifyBeforeUpdateEmailApp:newEmail:actionCodeSettings:completion:)],
                @"FirebaseAuthUserHostApi api (%@) doesn't respond to "
                @"@selector(verifyBeforeUpdateEmailApp:newEmail:actionCodeSettings:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_newEmail = GetNullableObjectAtIndex(args, 1);
        PigeonActionCodeSettings *arg_actionCodeSettings = GetNullableObjectAtIndex(args, 2);
        [api verifyBeforeUpdateEmailApp:arg_app
                               newEmail:arg_newEmail
                     actionCodeSettings:arg_actionCodeSettings
                             completion:^(FlutterError *_Nullable error) {
                               callback(wrapResult(nil, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface MultiFactorUserHostApiCodecReader : FlutterStandardReader
@end
@implementation MultiFactorUserHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [AuthPigeonFirebaseApp fromList:[self readValue]];
    case 129:
      return [PigeonMultiFactorInfo fromList:[self readValue]];
    case 130:
      return [PigeonMultiFactorSession fromList:[self readValue]];
    case 131:
      return [PigeonPhoneMultiFactorAssertion fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MultiFactorUserHostApiCodecWriter : FlutterStandardWriter
@end
@implementation MultiFactorUserHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AuthPigeonFirebaseApp class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonMultiFactorSession class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonPhoneMultiFactorAssertion class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MultiFactorUserHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MultiFactorUserHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MultiFactorUserHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MultiFactorUserHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MultiFactorUserHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MultiFactorUserHostApiCodecReaderWriter *readerWriter =
        [[MultiFactorUserHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpMultiFactorUserHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<MultiFactorUserHostApi> *api) {
  SetUpMultiFactorUserHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMultiFactorUserHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<MultiFactorUserHostApi> *api,
                                           NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.MultiFactorUserHostApi.enrollPhone",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enrollPhoneApp:
                                                       assertion:displayName:completion:)],
                @"MultiFactorUserHostApi api (%@) doesn't respond to "
                @"@selector(enrollPhoneApp:assertion:displayName:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        PigeonPhoneMultiFactorAssertion *arg_assertion = GetNullableObjectAtIndex(args, 1);
        NSString *arg_displayName = GetNullableObjectAtIndex(args, 2);
        [api enrollPhoneApp:arg_app
                  assertion:arg_assertion
                displayName:arg_displayName
                 completion:^(FlutterError *_Nullable error) {
                   callback(wrapResult(nil, error));
                 }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.MultiFactorUserHostApi.enrollTotp",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enrollTotpApp:
                                                    assertionId:displayName:completion:)],
                @"MultiFactorUserHostApi api (%@) doesn't respond to "
                @"@selector(enrollTotpApp:assertionId:displayName:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_assertionId = GetNullableObjectAtIndex(args, 1);
        NSString *arg_displayName = GetNullableObjectAtIndex(args, 2);
        [api enrollTotpApp:arg_app
               assertionId:arg_assertionId
               displayName:arg_displayName
                completion:^(FlutterError *_Nullable error) {
                  callback(wrapResult(nil, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.MultiFactorUserHostApi.getSession",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSessionApp:completion:)],
                @"MultiFactorUserHostApi api (%@) doesn't respond to "
                @"@selector(getSessionApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api getSessionApp:arg_app
                completion:^(PigeonMultiFactorSession *_Nullable output,
                             FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.MultiFactorUserHostApi.unenroll",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(unenrollApp:factorUid:completion:)],
                @"MultiFactorUserHostApi api (%@) doesn't respond to "
                @"@selector(unenrollApp:factorUid:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        NSString *arg_factorUid = GetNullableObjectAtIndex(args, 1);
        [api unenrollApp:arg_app
               factorUid:arg_factorUid
              completion:^(FlutterError *_Nullable error) {
                callback(wrapResult(nil, error));
              }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorUserHostApi.getEnrolledFactors",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorUserHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getEnrolledFactorsApp:completion:)],
                @"MultiFactorUserHostApi api (%@) doesn't respond to "
                @"@selector(getEnrolledFactorsApp:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AuthPigeonFirebaseApp *arg_app = GetNullableObjectAtIndex(args, 0);
        [api getEnrolledFactorsApp:arg_app
                        completion:^(NSArray<PigeonMultiFactorInfo *> *_Nullable output,
                                     FlutterError *_Nullable error) {
                          callback(wrapResult(output, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface MultiFactoResolverHostApiCodecReader : FlutterStandardReader
@end
@implementation MultiFactoResolverHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [PigeonAdditionalUserInfo fromList:[self readValue]];
    case 129:
      return [PigeonAuthCredential fromList:[self readValue]];
    case 130:
      return [PigeonPhoneMultiFactorAssertion fromList:[self readValue]];
    case 131:
      return [PigeonUserCredential fromList:[self readValue]];
    case 132:
      return [PigeonUserDetails fromList:[self readValue]];
    case 133:
      return [PigeonUserInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MultiFactoResolverHostApiCodecWriter : FlutterStandardWriter
@end
@implementation MultiFactoResolverHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PigeonAdditionalUserInfo class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonAuthCredential class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonPhoneMultiFactorAssertion class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserCredential class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserDetails class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PigeonUserInfo class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MultiFactoResolverHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MultiFactoResolverHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MultiFactoResolverHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MultiFactoResolverHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MultiFactoResolverHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MultiFactoResolverHostApiCodecReaderWriter *readerWriter =
        [[MultiFactoResolverHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpMultiFactoResolverHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                    NSObject<MultiFactoResolverHostApi> *api) {
  SetUpMultiFactoResolverHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMultiFactoResolverHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                              NSObject<MultiFactoResolverHostApi> *api,
                                              NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactoResolverHostApi.resolveSignIn",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactoResolverHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector
                     (resolveSignInResolverId:assertion:totpAssertionId:completion:)],
                @"MultiFactoResolverHostApi api (%@) doesn't respond to "
                @"@selector(resolveSignInResolverId:assertion:totpAssertionId:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_resolverId = GetNullableObjectAtIndex(args, 0);
        PigeonPhoneMultiFactorAssertion *arg_assertion = GetNullableObjectAtIndex(args, 1);
        NSString *arg_totpAssertionId = GetNullableObjectAtIndex(args, 2);
        [api resolveSignInResolverId:arg_resolverId
                           assertion:arg_assertion
                     totpAssertionId:arg_totpAssertionId
                          completion:^(PigeonUserCredential *_Nullable output,
                                       FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface MultiFactorTotpHostApiCodecReader : FlutterStandardReader
@end
@implementation MultiFactorTotpHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [PigeonTotpSecret fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface MultiFactorTotpHostApiCodecWriter : FlutterStandardWriter
@end
@implementation MultiFactorTotpHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PigeonTotpSecret class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface MultiFactorTotpHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MultiFactorTotpHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MultiFactorTotpHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MultiFactorTotpHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MultiFactorTotpHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    MultiFactorTotpHostApiCodecReaderWriter *readerWriter =
        [[MultiFactorTotpHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpMultiFactorTotpHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                 NSObject<MultiFactorTotpHostApi> *api) {
  SetUpMultiFactorTotpHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMultiFactorTotpHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                           NSObject<MultiFactorTotpHostApi> *api,
                                           NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorTotpHostApi.generateSecret",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorTotpHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(generateSecretSessionId:completion:)],
                @"MultiFactorTotpHostApi api (%@) doesn't respond to "
                @"@selector(generateSecretSessionId:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_sessionId = GetNullableObjectAtIndex(args, 0);
        [api generateSecretSessionId:arg_sessionId
                          completion:^(PigeonTotpSecret *_Nullable output,
                                       FlutterError *_Nullable error) {
                            callback(wrapResult(output, error));
                          }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorTotpHostApi.getAssertionForEnrollment",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorTotpHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAssertionForEnrollmentSecretKey:
                                                                     oneTimePassword:completion:)],
                @"MultiFactorTotpHostApi api (%@) doesn't respond to "
                @"@selector(getAssertionForEnrollmentSecretKey:oneTimePassword:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_secretKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_oneTimePassword = GetNullableObjectAtIndex(args, 1);
        [api getAssertionForEnrollmentSecretKey:arg_secretKey
                                oneTimePassword:arg_oneTimePassword
                                     completion:^(NSString *_Nullable output,
                                                  FlutterError *_Nullable error) {
                                       callback(wrapResult(output, error));
                                     }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorTotpHostApi.getAssertionForSignIn",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorTotpHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAssertionForSignInEnrollmentId:
                                                                    oneTimePassword:completion:)],
                @"MultiFactorTotpHostApi api (%@) doesn't respond to "
                @"@selector(getAssertionForSignInEnrollmentId:oneTimePassword:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_enrollmentId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_oneTimePassword = GetNullableObjectAtIndex(args, 1);
        [api getAssertionForSignInEnrollmentId:arg_enrollmentId
                               oneTimePassword:arg_oneTimePassword
                                    completion:^(NSString *_Nullable output,
                                                 FlutterError *_Nullable error) {
                                      callback(wrapResult(output, error));
                                    }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *MultiFactorTotpSecretHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpMultiFactorTotpSecretHostApi(id<FlutterBinaryMessenger> binaryMessenger,
                                       NSObject<MultiFactorTotpSecretHostApi> *api) {
  SetUpMultiFactorTotpSecretHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMultiFactorTotpSecretHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                                 NSObject<MultiFactorTotpSecretHostApi> *api,
                                                 NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorTotpSecretHostApi.generateQrCodeUrl",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorTotpSecretHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(generateQrCodeUrlSecretKey:
                                                                 accountName:issuer:completion:)],
                @"MultiFactorTotpSecretHostApi api (%@) doesn't respond to "
                @"@selector(generateQrCodeUrlSecretKey:accountName:issuer:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_secretKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_accountName = GetNullableObjectAtIndex(args, 1);
        NSString *arg_issuer = GetNullableObjectAtIndex(args, 2);
        [api generateQrCodeUrlSecretKey:arg_secretKey
                            accountName:arg_accountName
                                 issuer:arg_issuer
                             completion:^(NSString *_Nullable output,
                                          FlutterError *_Nullable error) {
                               callback(wrapResult(output, error));
                             }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.firebase_auth_platform_interface."
                                             @"MultiFactorTotpSecretHostApi.openInOtpApp",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:MultiFactorTotpSecretHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openInOtpAppSecretKey:qrCodeUrl:completion:)],
                @"MultiFactorTotpSecretHostApi api (%@) doesn't respond to "
                @"@selector(openInOtpAppSecretKey:qrCodeUrl:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_secretKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_qrCodeUrl = GetNullableObjectAtIndex(args, 1);
        [api openInOtpAppSecretKey:arg_secretKey
                         qrCodeUrl:arg_qrCodeUrl
                        completion:^(FlutterError *_Nullable error) {
                          callback(wrapResult(nil, error));
                        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface GenerateInterfacesCodecReader : FlutterStandardReader
@end
@implementation GenerateInterfacesCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [PigeonMultiFactorInfo fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface GenerateInterfacesCodecWriter : FlutterStandardWriter
@end
@implementation GenerateInterfacesCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PigeonMultiFactorInfo class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface GenerateInterfacesCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation GenerateInterfacesCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[GenerateInterfacesCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[GenerateInterfacesCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *GenerateInterfacesGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    GenerateInterfacesCodecReaderWriter *readerWriter =
        [[GenerateInterfacesCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpGenerateInterfaces(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<GenerateInterfaces> *api) {
  SetUpGenerateInterfacesWithSuffix(binaryMessenger, api, @"");
}

void SetUpGenerateInterfacesWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                       NSObject<GenerateInterfaces> *api,
                                       NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.firebase_auth_platform_"
                                                   @"interface.GenerateInterfaces.pigeonInterface",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:GenerateInterfacesGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(pigeonInterfaceInfo:error:)],
          @"GenerateInterfaces api (%@) doesn't respond to @selector(pigeonInterfaceInfo:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PigeonMultiFactorInfo *arg_info = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pigeonInterfaceInfo:arg_info error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
