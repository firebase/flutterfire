// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class CloudFunctionsMessagesPigeonCodecReader: FlutterStandardReader {}

private class CloudFunctionsMessagesPigeonCodecWriter: FlutterStandardWriter {}

private class CloudFunctionsMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    CloudFunctionsMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    CloudFunctionsMessagesPigeonCodecWriter(data: data)
  }
}

class CloudFunctionsMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared =
    CloudFunctionsMessagesPigeonCodec(readerWriter: CloudFunctionsMessagesPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CloudFunctionsHostApi {
  func call(arguments: [String: Any?], completion: @escaping (Result<Any?, Error>) -> Void)
  func registerEventChannel(arguments: [String: Any],
                            completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CloudFunctionsHostApiSetup {
  static var codec: FlutterStandardMessageCodec { CloudFunctionsMessagesPigeonCodec.shared }
  /// Sets up an instance of `CloudFunctionsHostApi` to handle messages through the
  /// `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CloudFunctionsHostApi?,
                    messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let callChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.cloud_functions_platform_interface.CloudFunctionsHostApi.call\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      callChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.call(arguments: argumentsArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      callChannel.setMessageHandler(nil)
    }
    let registerEventChannelChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.cloud_functions_platform_interface.CloudFunctionsHostApi.registerEventChannel\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      registerEventChannelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any]
        api.registerEventChannel(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      registerEventChannelChannel.setMessageHandler(nil)
    }
  }
}
