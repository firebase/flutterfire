// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import, no_leading_underscores_for_local_identifiers
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:firebase_crashlytics_platform_interface/src/pigeon/messages.pigeon.dart';

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Represents all methods for the Firebase Crashlytics plugin.
abstract class TestFirebaseCrashlyticsHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding =>
      TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Records a non-fatal error.
  Future<void> recordError(Map<String, Object?> arguments);

  /// Sets a custom key-value pair.
  Future<void> setCustomKey(Map<String, Object?> arguments);

  /// Sets the user identifier.
  Future<void> setUserIdentifier(Map<String, Object?> arguments);

  /// Logs a message.
  Future<void> log(Map<String, Object?> arguments);

  /// Enables/disables automatic data collection.
  Future<Map<String, bool>?> setCrashlyticsCollectionEnabled(
      Map<String, bool> arguments);

  /// Check for unsent reports.
  Future<Map<String, Object?>> checkForUnsentReports();

  /// Send any unsent reports.
  Future<void> sendUnsentReports();

  /// Delete any unsent reports.
  Future<void> deleteUnsentReports();

  /// Check if app crashed on previous execution.
  Future<Map<String, Object?>> didCrashOnPreviousExecution();

  /// Force a crash for testing.
  Future<void> crash();

  static void setUp(
    TestFirebaseCrashlyticsHostApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.recordError$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.recordError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_arguments =
              (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_arguments != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.recordError was null, expected non-null Map<String, Object?>.');
          try {
            await api.recordError(arg_arguments!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCustomKey$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCustomKey was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_arguments =
              (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_arguments != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCustomKey was null, expected non-null Map<String, Object?>.');
          try {
            await api.setCustomKey(arg_arguments!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setUserIdentifier$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setUserIdentifier was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_arguments =
              (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_arguments != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setUserIdentifier was null, expected non-null Map<String, Object?>.');
          try {
            await api.setUserIdentifier(arg_arguments!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.log$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.log was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, Object?>? arg_arguments =
              (args[0] as Map<Object?, Object?>?)?.cast<String, Object?>();
          assert(arg_arguments != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.log was null, expected non-null Map<String, Object?>.');
          try {
            await api.log(arg_arguments!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCrashlyticsCollectionEnabled$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCrashlyticsCollectionEnabled was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, bool>? arg_arguments =
              (args[0] as Map<Object?, Object?>?)?.cast<String, bool>();
          assert(arg_arguments != null,
              'Argument for dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCrashlyticsCollectionEnabled was null, expected non-null Map<String, bool>.');
          try {
            final Map<String, bool>? output =
                await api.setCrashlyticsCollectionEnabled(arg_arguments!);
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.checkForUnsentReports$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          try {
            final Map<String, Object?> output =
                await api.checkForUnsentReports();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.sendUnsentReports$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          try {
            await api.sendUnsentReports();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.deleteUnsentReports$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          try {
            await api.deleteUnsentReports();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.didCrashOnPreviousExecution$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          try {
            final Map<String, Object?> output =
                await api.didCrashOnPreviousExecution();
            return <Object?>[output];
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.crash$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger
            .setMockDecodedMessageHandler<Object?>(pigeonVar_channel,
                (Object? message) async {
          try {
            await api.crash();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
