// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class FirebaseCrashlyticsMessagesPigeonCodecReader: FlutterStandardReader {}

private class FirebaseCrashlyticsMessagesPigeonCodecWriter: FlutterStandardWriter {}

private class FirebaseCrashlyticsMessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    FirebaseCrashlyticsMessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    FirebaseCrashlyticsMessagesPigeonCodecWriter(data: data)
  }
}

class FirebaseCrashlyticsMessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared =
    FirebaseCrashlyticsMessagesPigeonCodec(
      readerWriter: FirebaseCrashlyticsMessagesPigeonCodecReaderWriter()
    )
}

/// Represents all methods for the Firebase Crashlytics plugin.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CrashlyticsHostApi {
  /// Records a non-fatal error.
  func recordError(arguments: [String: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  /// Sets a custom key-value pair.
  func setCustomKey(arguments: [String: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  /// Sets the user identifier.
  func setUserIdentifier(arguments: [String: Any?],
                         completion: @escaping (Result<Void, Error>) -> Void)
  /// Logs a message.
  func log(arguments: [String: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  /// Enables/disables automatic data collection.
  func setCrashlyticsCollectionEnabled(arguments: [String: Bool],
                                       completion: @escaping (Result<[String: Bool]?, Error>)
                                         -> Void)
  /// Check for unsent reports.
  func checkForUnsentReports(completion: @escaping (Result<[String: Any?], Error>) -> Void)
  /// Send any unsent reports.
  func sendUnsentReports(completion: @escaping (Result<Void, Error>) -> Void)
  /// Delete any unsent reports.
  func deleteUnsentReports(completion: @escaping (Result<Void, Error>) -> Void)
  /// Check if app crashed on previous execution.
  func didCrashOnPreviousExecution(completion: @escaping (Result<[String: Any?], Error>) -> Void)
  /// Force a crash for testing.
  func crash(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CrashlyticsHostApiSetup {
  static var codec: FlutterStandardMessageCodec { FirebaseCrashlyticsMessagesPigeonCodec.shared }
  /// Sets up an instance of `CrashlyticsHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CrashlyticsHostApi?,
                    messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Records a non-fatal error.
    let recordErrorChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.recordError\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      recordErrorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.recordError(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      recordErrorChannel.setMessageHandler(nil)
    }
    /// Sets a custom key-value pair.
    let setCustomKeyChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCustomKey\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setCustomKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.setCustomKey(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCustomKeyChannel.setMessageHandler(nil)
    }
    /// Sets the user identifier.
    let setUserIdentifierChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setUserIdentifier\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setUserIdentifierChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.setUserIdentifier(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setUserIdentifierChannel.setMessageHandler(nil)
    }
    /// Logs a message.
    let logChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.log\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      logChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.log(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      logChannel.setMessageHandler(nil)
    }
    /// Enables/disables automatic data collection.
    let setCrashlyticsCollectionEnabledChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCrashlyticsCollectionEnabled\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      setCrashlyticsCollectionEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Bool]
        api.setCrashlyticsCollectionEnabled(arguments: argumentsArg) { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCrashlyticsCollectionEnabledChannel.setMessageHandler(nil)
    }
    /// Check for unsent reports.
    let checkForUnsentReportsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.checkForUnsentReports\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      checkForUnsentReportsChannel.setMessageHandler { _, reply in
        api.checkForUnsentReports { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      checkForUnsentReportsChannel.setMessageHandler(nil)
    }
    /// Send any unsent reports.
    let sendUnsentReportsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.sendUnsentReports\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      sendUnsentReportsChannel.setMessageHandler { _, reply in
        api.sendUnsentReports { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendUnsentReportsChannel.setMessageHandler(nil)
    }
    /// Delete any unsent reports.
    let deleteUnsentReportsChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.deleteUnsentReports\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      deleteUnsentReportsChannel.setMessageHandler { _, reply in
        api.deleteUnsentReports { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteUnsentReportsChannel.setMessageHandler(nil)
    }
    /// Check if app crashed on previous execution.
    let didCrashOnPreviousExecutionChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.didCrashOnPreviousExecution\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      didCrashOnPreviousExecutionChannel.setMessageHandler { _, reply in
        api.didCrashOnPreviousExecution { result in
          switch result {
          case let .success(res):
            reply(wrapResult(res))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      didCrashOnPreviousExecutionChannel.setMessageHandler(nil)
    }
    /// Force a crash for testing.
    let crashChannel = FlutterBasicMessageChannel(
      name: "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.crash\(channelSuffix)",
      binaryMessenger: binaryMessenger,
      codec: codec
    )
    if let api {
      crashChannel.setMessageHandler { _, reply in
        api.crash { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case let .failure(error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      crashChannel.setMessageHandler(nil)
    }
  }
}
