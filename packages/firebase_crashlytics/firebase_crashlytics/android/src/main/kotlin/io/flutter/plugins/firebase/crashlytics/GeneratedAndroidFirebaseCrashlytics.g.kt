// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package io.flutter.plugins.firebase.crashlytics

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object GeneratedAndroidFirebaseCrashlyticsPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private open class GeneratedAndroidFirebaseCrashlyticsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return     super.readValueOfType(type, buffer)
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    super.writeValue(stream, value)
  }
}


/**
 * Represents all methods for the Firebase Crashlytics plugin.
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface CrashlyticsHostApi {
  /** Records a non-fatal error. */
  fun recordError(arguments: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
  /** Sets a custom key-value pair. */
  fun setCustomKey(arguments: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
  /** Sets the user identifier. */
  fun setUserIdentifier(arguments: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
  /** Logs a message. */
  fun log(arguments: Map<String, Any?>, callback: (Result<Unit>) -> Unit)
  /** Enables/disables automatic data collection. */
  fun setCrashlyticsCollectionEnabled(arguments: Map<String, Boolean>, callback: (Result<Map<String, Boolean>?>) -> Unit)
  /** Check for unsent reports. */
  fun checkForUnsentReports(callback: (Result<Map<String, Any?>>) -> Unit)
  /** Send any unsent reports. */
  fun sendUnsentReports(callback: (Result<Unit>) -> Unit)
  /** Delete any unsent reports. */
  fun deleteUnsentReports(callback: (Result<Unit>) -> Unit)
  /** Check if app crashed on previous execution. */
  fun didCrashOnPreviousExecution(callback: (Result<Map<String, Any?>>) -> Unit)
  /** Force a crash for testing. */
  fun crash(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CrashlyticsHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseCrashlyticsPigeonCodec()
    }
    /** Sets up an instance of `CrashlyticsHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CrashlyticsHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.recordError$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argumentsArg = args[0] as Map<String, Any?>
            api.recordError(argumentsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCustomKey$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argumentsArg = args[0] as Map<String, Any?>
            api.setCustomKey(argumentsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setUserIdentifier$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argumentsArg = args[0] as Map<String, Any?>
            api.setUserIdentifier(argumentsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.log$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argumentsArg = args[0] as Map<String, Any?>
            api.log(argumentsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.setCrashlyticsCollectionEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val argumentsArg = args[0] as Map<String, Boolean>
            api.setCrashlyticsCollectionEnabled(argumentsArg) { result: Result<Map<String, Boolean>?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.checkForUnsentReports$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.checkForUnsentReports{ result: Result<Map<String, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.sendUnsentReports$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.sendUnsentReports{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.deleteUnsentReports$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.deleteUnsentReports{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.didCrashOnPreviousExecution$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.didCrashOnPreviousExecution{ result: Result<Map<String, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_crashlytics_platform_interface.CrashlyticsHostApi.crash$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.crash{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseCrashlyticsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
