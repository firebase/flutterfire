# Create a movie based on user input
mutation addPerson($name: String) @auth(level: PUBLIC) {
  person_insert(data: { name: $name })
}
mutation addDirectorToMovie($personId: Person_Key, $movieId: UUID)
@auth(level: PUBLIC) {
  directedBy_insert(data: { directedby: $personId, movieId: $movieId })
}
mutation addTimestamp($timestamp: Timestamp!) @auth(level: PUBLIC) {
  timestampHolder_insert(data: { timestamp: $timestamp })
}

mutation addDateAndTimestamp($date: Date!, $timestamp: Timestamp!)
@auth(level: PUBLIC) {
  timestampHolder_insert(data: { date: $date, timestamp: $timestamp })
}

mutation deleteAllTimestamps @auth(level: PUBLIC) {
  timestampHolder_deleteMany(all: true)
}

mutation seedMovies @auth(level: PUBLIC) {
  the_matrix: movie_insert(
    data: {
      id: "09d5f835656c467787347668bbb44522"
      title: "The Matrix"
      releaseYear: 1999
      genre: "Sci-Fi"
      rating: 5.0
      description: "When a beautiful stranger leads computer hacker Neo to a forbidding underworld, he discovers the shocking truth--the life he knows is the elaborate deception of an evil cyber-intelligence."
    }
  )
  jurassic_park: movie_insert(
    data: {
      title: "Jurassic Park"
      releaseYear: 1993
      genre: "Adventure"
      rating: 5.0
      description: "An industrialist invites some experts to visit his theme park of cloned dinosaurs. After a power failure, the creatures run loose, putting everyone's lives, including his grandchildren's, in danger."
    }
  )
}
mutation createMovie(
  $title: String!
  $releaseYear: Int!
  $genre: String!
  $rating: Float
  $description: String
) @auth(level: PUBLIC) {
  movie_insert(
    data: {
      title: $title
      releaseYear: $releaseYear
      genre: $genre
      rating: $rating
      description: $description
    }
  )
}

# Delete a movie by its ID
mutation deleteMovie($id: UUID!) @auth(level: PUBLIC) {
  movie_delete(id: $id)
}

mutation thing($title: Any! = "ABC") @auth(level: PUBLIC) {
  thing_insert(data: { title: $title })
}

mutation seedData @auth(level: PUBLIC) {
  the_matrix: movie_insert(
    data: {
      id: "09d5f835656c467787347668bbb44522"
      title: "The Matrix"
      releaseYear: 1999
      genre: "Action"
      rating: 5.0
      description: "When a beautiful stranger leads computer hacker Neo to a forbidding underworld, he discovers the shocking truth--the life he knows is the elaborate deception of an evil cyber-intelligence."
    }
  )
}

# # Update movie information based on the provided ID
# mutation updateMovie(
#   $id: UUID!
#   $title: String
#   $releaseYear: Int
#   $genre: String
#   $rating: Float
#   $description: String
#   $imageUrl: String
#   $tags: [String!] = []
# ) {
#   movie_update(
#     id: $id
#     data: {
#       title: $title
#       releaseYear: $releaseYear
#       genre: $genre
#       rating: $rating
#       description: $description
#       imageUrl: $imageUrl
#       tags: $tags
#     }
#   )
# }

# # Delete movies with a rating lower than the specified minimum rating
# mutation deleteUnpopularMovies($minRating: Float!) {
#   movie_deleteMany(where: { rating: { le: $minRating } })
# }

# # Add a movie to the user's watched list
# mutation addWatchedMovie($movieId: UUID!) @auth(level: USER) {
#   watchedMovie_upsert(data: { userId_expr: "auth.uid", movieId: $movieId })
# }

# # Remove a movie from the user's watched list
# mutation deleteWatchedMovie($userId: String!, $movieId: UUID!) @auth(level: USER) {
#   watchedMovie_delete(key: { userId: $userId, movieId: $movieId })
# }

# # Add a movie to the user's favorites list
# mutation addFavoritedMovie($movieId: UUID!) @auth(level: USER) {
#   favoriteMovie_upsert(data: { userId_expr: "auth.uid", movieId: $movieId })
# }

# # Remove a movie from the user's favorites list
# mutation deleteFavoritedMovie($userId: String!, $movieId: UUID!) @auth(level: USER) {
#   favoriteMovie_delete(key: { userId: $userId, movieId: $movieId })
# }

# # Add an actor to the user's favorites list
# mutation addFavoritedActor($actorId: UUID!) @auth(level: USER) {
#   favoriteActor_upsert(data: { userId_expr: "auth.uid", actorId: $actorId })
# }

# # Remove an actor from the user's favorites list
# mutation deleteFavoriteActor($userId: String!, $actorId: UUID!) @auth(level: USER) {
#   favoriteActor_delete(key: { userId: $userId, actorId: $actorId })
# }

# # Add a review for a movie
# mutation addReview($movieId: UUID!, $rating: Int!, $reviewText: String!) @auth(level: USER) {
#   review_upsert(
#     data: {
#       userId_expr: "auth.uid"
#       movieId: $movieId
#       rating: $rating
#       reviewText: $reviewText
#       reviewDate_date: { today: true }
#     }
#   )
# }

# # Delete a user's review for a movie
# mutation deleteReview($movieId: UUID!, $userId: String!) @auth(level: USER) {
#   review_delete(key: { userId: $userId, movieId: $movieId })
# }

# # Upsert (update or insert) a user based on their username
# mutation upsertUser($username: String!) @auth(level: USER) {
#   user_upsert(data: {
#     id_expr: "auth.uid",
#     username: $username
#   })
# }
