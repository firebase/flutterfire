// Mocks generated by Mockito 5.4.4 from annotations
// in firebase_data_connect/test/src/firebase_data_connect_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:firebase_core_platform_interface/firebase_core_platform_interface.dart'
    as _i2;
import 'package:firebase_data_connect/src/common/common_library.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseOptions_0 extends _i1.SmartFake
    implements _i2.FirebaseOptions {
  _FakeFirebaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApp extends _i1.Mock implements _i3.FirebaseApp {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i2.FirebaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeFirebaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeFirebaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.FirebaseOptions);

  @override
  bool get isAutomaticDataCollectionEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutomaticDataCollectionEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setAutomaticDataCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticDataCollectionEnabled,
          [enabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setAutomaticResourceManagementEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutomaticResourceManagementEnabled,
          [enabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ConnectorConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectorConfig extends _i1.Mock implements _i6.ConnectorConfig {
  @override
  String get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#location),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#location),
        ),
      ) as String);

  @override
  set location(String? _location) => super.noSuchMethod(
        Invocation.setter(
          #location,
          _location,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get connector => (super.noSuchMethod(
        Invocation.getter(#connector),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#connector),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#connector),
        ),
      ) as String);

  @override
  set connector(String? _connector) => super.noSuchMethod(
        Invocation.setter(
          #connector,
          _connector,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get serviceId => (super.noSuchMethod(
        Invocation.getter(#serviceId),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#serviceId),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#serviceId),
        ),
      ) as String);

  @override
  set serviceId(String? _serviceId) => super.noSuchMethod(
        Invocation.setter(
          #serviceId,
          _serviceId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #toJson,
            [],
          ),
        ),
      ) as String);
}
