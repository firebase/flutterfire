// Mocks generated by Mockito 5.4.4 from annotations
// in firebase_data_connect/test/src/core/ref_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_app_check/firebase_app_check.dart' as _i4;
import 'package:firebase_data_connect/src/common/common_library.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransportOptions_0 extends _i1.SmartFake
    implements _i2.TransportOptions {
  _FakeTransportOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataConnectOptions_1 extends _i1.SmartFake
    implements _i2.DataConnectOptions {
  _FakeDataConnectOptions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DataConnectTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataConnectTransport extends _i1.Mock
    implements _i2.DataConnectTransport {
  MockDataConnectTransport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TransportOptions get transportOptions => (super.noSuchMethod(
        Invocation.getter(#transportOptions),
        returnValue: _FakeTransportOptions_0(
          this,
          Invocation.getter(#transportOptions),
        ),
      ) as _i2.TransportOptions);

  @override
  set transportOptions(_i2.TransportOptions? _transportOptions) =>
      super.noSuchMethod(
        Invocation.setter(
          #transportOptions,
          _transportOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.DataConnectOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeDataConnectOptions_1(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.DataConnectOptions);

  @override
  set options(_i2.DataConnectOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set appCheck(_i4.FirebaseAppCheck? _appCheck) => super.noSuchMethod(
        Invocation.setter(
          #appCheck,
          _appCheck,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CallerSDKType get sdkType => (super.noSuchMethod(
        Invocation.getter(#sdkType),
        returnValue: _i2.CallerSDKType.core,
      ) as _i2.CallerSDKType);

  @override
  set sdkType(_i2.CallerSDKType? _sdkType) => super.noSuchMethod(
        Invocation.setter(
          #sdkType,
          _sdkType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get appId => (super.noSuchMethod(
        Invocation.getter(#appId),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#appId),
        ),
      ) as String);

  @override
  set appId(String? _appId) => super.noSuchMethod(
        Invocation.setter(
          #appId,
          _appId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<Data> invokeQuery<Data, Variables>(
    String? queryName,
    _i2.Deserializer<Data>? deserializer,
    _i2.Serializer<Variables>? serializer,
    Variables? vars,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeQuery,
          [
            queryName,
            deserializer,
            serializer,
            vars,
            token,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<Data>(
                this,
                Invocation.method(
                  #invokeQuery,
                  [
                    queryName,
                    deserializer,
                    serializer,
                    vars,
                    token,
                  ],
                ),
              ),
              (Data v) => _i3.Future<Data>.value(v),
            ) ??
            _FakeFuture_2<Data>(
              this,
              Invocation.method(
                #invokeQuery,
                [
                  queryName,
                  deserializer,
                  serializer,
                  vars,
                  token,
                ],
              ),
            ),
      ) as _i3.Future<Data>);

  @override
  _i3.Future<Data> invokeMutation<Data, Variables>(
    String? queryName,
    _i2.Deserializer<Data>? deserializer,
    _i2.Serializer<Variables>? serializer,
    Variables? vars,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMutation,
          [
            queryName,
            deserializer,
            serializer,
            vars,
            token,
          ],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<Data>(
                this,
                Invocation.method(
                  #invokeMutation,
                  [
                    queryName,
                    deserializer,
                    serializer,
                    vars,
                    token,
                  ],
                ),
              ),
              (Data v) => _i3.Future<Data>.value(v),
            ) ??
            _FakeFuture_2<Data>(
              this,
              Invocation.method(
                #invokeMutation,
                [
                  queryName,
                  deserializer,
                  serializer,
                  vars,
                  token,
                ],
              ),
            ),
      ) as _i3.Future<Data>);
}
