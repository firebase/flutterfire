// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.storage

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * The type of operation that generated the action code from calling
 * [TaskState].
 */
enum class PigeonStorageTaskState(val raw: Int) {
  /** Indicates the task has been paused by the user. */
  PAUSED(0),
  /** Indicates the task is currently in-progress. */
  RUNNING(1),
  /** Indicates the task has successfully completed. */
  SUCCESS(2),
  /** Indicates the task was canceled. */
  CANCELED(3),
  /** Indicates the task failed with an error. */
  ERROR(4);

  companion object {
    fun ofRaw(raw: Int): PigeonStorageTaskState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonStorageFirebaseApp (
  val appName: String,
  val tenantId: String? = null,
  val bucket: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonStorageFirebaseApp {
      val appName = list[0] as String
      val tenantId = list[1] as String?
      val bucket = list[2] as String
      return PigeonStorageFirebaseApp(appName, tenantId, bucket)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      appName,
      tenantId,
      bucket,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonStorageReference (
  val bucket: String,
  val fullPath: String,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonStorageReference {
      val bucket = list[0] as String
      val fullPath = list[1] as String
      val name = list[2] as String
      return PigeonStorageReference(bucket, fullPath, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      bucket,
      fullPath,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonFullMetaData (
  val metadata: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonFullMetaData {
      val metadata = list[0] as Map<String?, Any?>?
      return PigeonFullMetaData(metadata)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      metadata,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonListOptions (
  /**
   * If set, limits the total number of `prefixes` and `items` to return.
   *
   * The default and maximum maxResults is 1000.
   */
  val maxResults: Long,
  /**
   * The nextPageToken from a previous call to list().
   *
   * If provided, listing is resumed from the previous position.
   */
  val pageToken: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonListOptions {
      val maxResults = list[0].let { if (it is Int) it.toLong() else it as Long }
      val pageToken = list[1] as String?
      return PigeonListOptions(maxResults, pageToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      maxResults,
      pageToken,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonSettableMetadata (
  /**
   * Served as the 'Cache-Control' header on object download.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control.
   */
  val cacheControl: String? = null,
  /**
   * Served as the 'Content-Disposition' header on object download.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition.
   */
  val contentDisposition: String? = null,
  /**
   * Served as the 'Content-Encoding' header on object download.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding.
   */
  val contentEncoding: String? = null,
  /**
   * Served as the 'Content-Language' header on object download.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language.
   */
  val contentLanguage: String? = null,
  /**
   * Served as the 'Content-Type' header on object download.
   *
   * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type.
   */
  val contentType: String? = null,
  /** Additional user-defined custom metadata. */
  val customMetadata: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonSettableMetadata {
      val cacheControl = list[0] as String?
      val contentDisposition = list[1] as String?
      val contentEncoding = list[2] as String?
      val contentLanguage = list[3] as String?
      val contentType = list[4] as String?
      val customMetadata = list[5] as Map<String?, String?>?
      return PigeonSettableMetadata(cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, customMetadata)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      cacheControl,
      contentDisposition,
      contentEncoding,
      contentLanguage,
      contentType,
      customMetadata,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonListResult (
  val items: List<PigeonStorageReference?>,
  val pageToken: String? = null,
  val prefixs: List<PigeonStorageReference?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonListResult {
      val items = list[0] as List<PigeonStorageReference?>
      val pageToken = list[1] as String?
      val prefixs = list[2] as List<PigeonStorageReference?>
      return PigeonListResult(items, pageToken, prefixs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      items,
      pageToken,
      prefixs,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object FirebaseStorageHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonFullMetaData.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonListOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonListResult.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonSettableMetadata.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonStorageFirebaseApp.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonStorageReference.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonFullMetaData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonListOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonListResult -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonSettableMetadata -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PigeonStorageFirebaseApp -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonStorageReference -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebaseStorageHostApi {
  fun getReferencebyPath(app: PigeonStorageFirebaseApp, path: String, bucket: String?, callback: (Result<PigeonStorageReference>) -> Unit)
  fun setMaxOperationRetryTime(app: PigeonStorageFirebaseApp, time: Long, callback: (Result<Unit>) -> Unit)
  fun setMaxUploadRetryTime(app: PigeonStorageFirebaseApp, time: Long, callback: (Result<Unit>) -> Unit)
  fun setMaxDownloadRetryTime(app: PigeonStorageFirebaseApp, time: Long, callback: (Result<Unit>) -> Unit)
  fun useStorageEmulator(app: PigeonStorageFirebaseApp, host: String, port: Long, callback: (Result<Unit>) -> Unit)
  fun referenceDelete(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, callback: (Result<Unit>) -> Unit)
  fun referenceGetDownloadURL(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, callback: (Result<String>) -> Unit)
  fun referenceGetMetaData(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, callback: (Result<PigeonFullMetaData>) -> Unit)
  fun referenceList(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, options: PigeonListOptions, callback: (Result<PigeonListResult>) -> Unit)
  fun referenceListAll(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, callback: (Result<PigeonListResult>) -> Unit)
  fun referenceGetData(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, maxSize: Long, callback: (Result<ByteArray?>) -> Unit)
  fun referencePutData(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, data: ByteArray, settableMetaData: PigeonSettableMetadata, handle: Long, callback: (Result<String>) -> Unit)
  fun referencePutString(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, data: String, format: Long, settableMetaData: PigeonSettableMetadata, handle: Long, callback: (Result<String>) -> Unit)
  fun referencePutFile(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, filePath: String, settableMetaData: PigeonSettableMetadata?, handle: Long, callback: (Result<String>) -> Unit)
  fun referenceDownloadFile(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, filePath: String, handle: Long, callback: (Result<String>) -> Unit)
  fun referenceUpdateMetadata(app: PigeonStorageFirebaseApp, reference: PigeonStorageReference, metadata: PigeonSettableMetadata, callback: (Result<PigeonFullMetaData>) -> Unit)
  fun taskPause(app: PigeonStorageFirebaseApp, handle: Long, callback: (Result<Map<String, Any>>) -> Unit)
  fun taskResume(app: PigeonStorageFirebaseApp, handle: Long, callback: (Result<Map<String, Any>>) -> Unit)
  fun taskCancel(app: PigeonStorageFirebaseApp, handle: Long, callback: (Result<Map<String, Any>>) -> Unit)

  companion object {
    /** The codec used by FirebaseStorageHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      FirebaseStorageHostApiCodec
    }
    /** Sets up an instance of `FirebaseStorageHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebaseStorageHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.getReferencebyPath", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val pathArg = args[1] as String
            val bucketArg = args[2] as String?
            api.getReferencebyPath(appArg, pathArg, bucketArg) { result: Result<PigeonStorageReference> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.setMaxOperationRetryTime", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val timeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.setMaxOperationRetryTime(appArg, timeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.setMaxUploadRetryTime", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val timeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.setMaxUploadRetryTime(appArg, timeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.setMaxDownloadRetryTime", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val timeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.setMaxDownloadRetryTime(appArg, timeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.useStorageEmulator", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val hostArg = args[1] as String
            val portArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            api.useStorageEmulator(appArg, hostArg, portArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceDelete", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            api.referenceDelete(appArg, referenceArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceGetDownloadURL", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            api.referenceGetDownloadURL(appArg, referenceArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceGetMetaData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            api.referenceGetMetaData(appArg, referenceArg) { result: Result<PigeonFullMetaData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceList", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val optionsArg = args[2] as PigeonListOptions
            api.referenceList(appArg, referenceArg, optionsArg) { result: Result<PigeonListResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceListAll", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            api.referenceListAll(appArg, referenceArg) { result: Result<PigeonListResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceGetData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val maxSizeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            api.referenceGetData(appArg, referenceArg, maxSizeArg) { result: Result<ByteArray?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referencePutData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val dataArg = args[2] as ByteArray
            val settableMetaDataArg = args[3] as PigeonSettableMetadata
            val handleArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            api.referencePutData(appArg, referenceArg, dataArg, settableMetaDataArg, handleArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referencePutString", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val dataArg = args[2] as String
            val formatArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val settableMetaDataArg = args[4] as PigeonSettableMetadata
            val handleArg = args[5].let { if (it is Int) it.toLong() else it as Long }
            api.referencePutString(appArg, referenceArg, dataArg, formatArg, settableMetaDataArg, handleArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referencePutFile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val filePathArg = args[2] as String
            val settableMetaDataArg = args[3] as PigeonSettableMetadata?
            val handleArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            api.referencePutFile(appArg, referenceArg, filePathArg, settableMetaDataArg, handleArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceDownloadFile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val filePathArg = args[2] as String
            val handleArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            api.referenceDownloadFile(appArg, referenceArg, filePathArg, handleArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.referenceUpdateMetadata", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val referenceArg = args[1] as PigeonStorageReference
            val metadataArg = args[2] as PigeonSettableMetadata
            api.referenceUpdateMetadata(appArg, referenceArg, metadataArg) { result: Result<PigeonFullMetaData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.taskPause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val handleArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.taskPause(appArg, handleArg) { result: Result<Map<String, Any>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.taskResume", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val handleArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.taskResume(appArg, handleArg) { result: Result<Map<String, Any>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_storage_platform_interface.FirebaseStorageHostApi.taskCancel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as PigeonStorageFirebaseApp
            val handleArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.taskCancel(appArg, handleArg) { result: Result<Map<String, Any>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
