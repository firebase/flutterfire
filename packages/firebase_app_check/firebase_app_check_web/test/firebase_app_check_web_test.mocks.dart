// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Mocks generated by Mockito 5.4.6 from annotations
// in firebase_app_check_web/test/firebase_app_check_web_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_app_check_platform_interface/firebase_app_check_platform_interface.dart'
    as _i3;
import 'package:firebase_app_check_web/firebase_app_check_web.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAppCheckPlatform_1 extends _i1.SmartFake
    implements _i3.FirebaseAppCheckPlatform {
  _FakeFirebaseAppCheckPlatform_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAppCheckWeb_2 extends _i1.SmartFake
    implements _i4.FirebaseAppCheckWeb {
  _FakeFirebaseAppCheckWeb_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAppCheckWeb].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAppCheckWeb extends _i1.Mock
    implements _i4.FirebaseAppCheckWeb {
  @override
  _i5.Stream<String?> get onTokenChange => (super.noSuchMethod(
        Invocation.getter(#onTokenChange),
        returnValue: _i5.Stream<String?>.empty(),
        returnValueForMissingStub: _i5.Stream<String?>.empty(),
      ) as _i5.Stream<String?>);

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_0(
          this,
          Invocation.getter(#app),
        ),
      ) as _i2.FirebaseApp);

  @override
  _i3.FirebaseAppCheckPlatform delegateFor({required _i2.FirebaseApp? app}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delegateFor,
          [],
          {#app: app},
        ),
        returnValue: _FakeFirebaseAppCheckPlatform_1(
          this,
          Invocation.method(
            #delegateFor,
            [],
            {#app: app},
          ),
        ),
        returnValueForMissingStub: _FakeFirebaseAppCheckPlatform_1(
          this,
          Invocation.method(
            #delegateFor,
            [],
            {#app: app},
          ),
        ),
      ) as _i3.FirebaseAppCheckPlatform);

  @override
  _i4.FirebaseAppCheckWeb setInitialValues() => (super.noSuchMethod(
        Invocation.method(
          #setInitialValues,
          [],
        ),
        returnValue: _FakeFirebaseAppCheckWeb_2(
          this,
          Invocation.method(
            #setInitialValues,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFirebaseAppCheckWeb_2(
          this,
          Invocation.method(
            #setInitialValues,
            [],
          ),
        ),
      ) as _i4.FirebaseAppCheckWeb);

  @override
  _i5.Future<void> activate({
    _i3.WebProvider? webProvider,
    _i3.AndroidProvider? androidProvider,
    _i3.AppleProvider? appleProvider,
    _i3.AndroidAppCheckProvider? providerAndroid,
    _i3.AppleAppCheckProvider? providerApple,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
          {
            #webProvider: webProvider,
            #androidProvider: androidProvider,
            #appleProvider: appleProvider,
            #providerAndroid: providerAndroid,
            #providerApple: providerApple,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getToken(bool? forceRefresh) => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [forceRefresh],
        ),
        returnValue: _i5.Future<String?>.value(),
        returnValueForMissingStub: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<String> getLimitedUseToken() => (super.noSuchMethod(
        Invocation.method(
          #getLimitedUseToken,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getLimitedUseToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getLimitedUseToken,
            [],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<void> setTokenAutoRefreshEnabled(
          bool? isTokenAutoRefreshEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setTokenAutoRefreshEnabled,
          [isTokenAutoRefreshEnabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
