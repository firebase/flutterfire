// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_app_check_windows {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// AppCheckWebProvider

AppCheckWebProvider::AppCheckWebProvider(const std::string& provider_name)
 : provider_name_(provider_name) {}

const std::string& AppCheckWebProvider::provider_name() const {
  return provider_name_;
}

void AppCheckWebProvider::set_provider_name(std::string_view value_arg) {
  provider_name_ = value_arg;
}


EncodableList AppCheckWebProvider::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(provider_name_));
  return list;
}

AppCheckWebProvider AppCheckWebProvider::FromEncodableList(const EncodableList& list) {
  AppCheckWebProvider decoded(
    std::get<std::string>(list[0]));
  return decoded;
}

// AppCheckAndroidProvider

AppCheckAndroidProvider::AppCheckAndroidProvider(const std::string& provider_name)
 : provider_name_(provider_name) {}

const std::string& AppCheckAndroidProvider::provider_name() const {
  return provider_name_;
}

void AppCheckAndroidProvider::set_provider_name(std::string_view value_arg) {
  provider_name_ = value_arg;
}


EncodableList AppCheckAndroidProvider::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(provider_name_));
  return list;
}

AppCheckAndroidProvider AppCheckAndroidProvider::FromEncodableList(const EncodableList& list) {
  AppCheckAndroidProvider decoded(
    std::get<std::string>(list[0]));
  return decoded;
}

// AppCheckAppleProvider

AppCheckAppleProvider::AppCheckAppleProvider(const std::string& provider_name)
 : provider_name_(provider_name) {}

const std::string& AppCheckAppleProvider::provider_name() const {
  return provider_name_;
}

void AppCheckAppleProvider::set_provider_name(std::string_view value_arg) {
  provider_name_ = value_arg;
}


EncodableList AppCheckAppleProvider::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(provider_name_));
  return list;
}

AppCheckAppleProvider AppCheckAppleProvider::FromEncodableList(const EncodableList& list) {
  AppCheckAppleProvider decoded(
    std::get<std::string>(list[0]));
  return decoded;
}

// AppCheckPigeonSettings

AppCheckPigeonSettings::AppCheckPigeonSettings(
  const AppCheckWebProvider& web_provider,
  const AppCheckAndroidProvider& android_provider,
  const AppCheckAppleProvider& apple_provider)
 : web_provider_(std::make_unique<AppCheckWebProvider>(web_provider)),
    android_provider_(std::make_unique<AppCheckAndroidProvider>(android_provider)),
    apple_provider_(std::make_unique<AppCheckAppleProvider>(apple_provider)) {}

AppCheckPigeonSettings::AppCheckPigeonSettings(const AppCheckPigeonSettings& other)
 : web_provider_(std::make_unique<AppCheckWebProvider>(*other.web_provider_)),
    android_provider_(std::make_unique<AppCheckAndroidProvider>(*other.android_provider_)),
    apple_provider_(std::make_unique<AppCheckAppleProvider>(*other.apple_provider_)) {}

AppCheckPigeonSettings& AppCheckPigeonSettings::operator=(const AppCheckPigeonSettings& other) {
  web_provider_ = std::make_unique<AppCheckWebProvider>(*other.web_provider_);
  android_provider_ = std::make_unique<AppCheckAndroidProvider>(*other.android_provider_);
  apple_provider_ = std::make_unique<AppCheckAppleProvider>(*other.apple_provider_);
  return *this;
}

const AppCheckWebProvider& AppCheckPigeonSettings::web_provider() const {
  return *web_provider_;
}

void AppCheckPigeonSettings::set_web_provider(const AppCheckWebProvider& value_arg) {
  web_provider_ = std::make_unique<AppCheckWebProvider>(value_arg);
}


const AppCheckAndroidProvider& AppCheckPigeonSettings::android_provider() const {
  return *android_provider_;
}

void AppCheckPigeonSettings::set_android_provider(const AppCheckAndroidProvider& value_arg) {
  android_provider_ = std::make_unique<AppCheckAndroidProvider>(value_arg);
}


const AppCheckAppleProvider& AppCheckPigeonSettings::apple_provider() const {
  return *apple_provider_;
}

void AppCheckPigeonSettings::set_apple_provider(const AppCheckAppleProvider& value_arg) {
  apple_provider_ = std::make_unique<AppCheckAppleProvider>(value_arg);
}


EncodableList AppCheckPigeonSettings::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(CustomEncodableValue(*web_provider_));
  list.push_back(CustomEncodableValue(*android_provider_));
  list.push_back(CustomEncodableValue(*apple_provider_));
  return list;
}

AppCheckPigeonSettings AppCheckPigeonSettings::FromEncodableList(const EncodableList& list) {
  AppCheckPigeonSettings decoded(
    std::any_cast<const AppCheckWebProvider&>(std::get<CustomEncodableValue>(list[0])),
    std::any_cast<const AppCheckAndroidProvider&>(std::get<CustomEncodableValue>(list[1])),
    std::any_cast<const AppCheckAppleProvider&>(std::get<CustomEncodableValue>(list[2])));
  return decoded;
}


PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
        return CustomEncodableValue(AppCheckWebProvider::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 130: {
        return CustomEncodableValue(AppCheckAndroidProvider::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 131: {
        return CustomEncodableValue(AppCheckAppleProvider::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    case 132: {
        return CustomEncodableValue(AppCheckPigeonSettings::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
      }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
    }
}

void PigeonInternalCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(AppCheckWebProvider)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<AppCheckWebProvider>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AppCheckAndroidProvider)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<AppCheckAndroidProvider>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AppCheckAppleProvider)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<AppCheckAppleProvider>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(AppCheckPigeonSettings)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<AppCheckPigeonSettings>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by FirebaseAppCheckHostApi.
const flutter::StandardMessageCodec& FirebaseAppCheckHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `FirebaseAppCheckHostApi` to handle messages through the `binary_messenger`.
void FirebaseAppCheckHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseAppCheckHostApi* api) {
  FirebaseAppCheckHostApi::SetUp(binary_messenger, api, "");
}

void FirebaseAppCheckHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseAppCheckHostApi* api,
  const std::string& message_channel_suffix) {
  const std::string prepended_suffix = message_channel_suffix.length() > 0 ? std::string(".") + message_channel_suffix : "";
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.activate" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_name_arg = args.at(0);
          if (encodable_app_name_arg.IsNull()) {
            reply(WrapError("app_name_arg unexpectedly null."));
            return;
          }
          const auto& app_name_arg = std::get<std::string>(encodable_app_name_arg);
          const auto& encodable_web_provider_arg = args.at(1);
          if (encodable_web_provider_arg.IsNull()) {
            reply(WrapError("web_provider_arg unexpectedly null."));
            return;
          }
          const auto& web_provider_arg = std::any_cast<const AppCheckWebProvider&>(std::get<CustomEncodableValue>(encodable_web_provider_arg));
          const auto& encodable_android_provider_arg = args.at(2);
          if (encodable_android_provider_arg.IsNull()) {
            reply(WrapError("android_provider_arg unexpectedly null."));
            return;
          }
          const auto& android_provider_arg = std::any_cast<const AppCheckAndroidProvider&>(std::get<CustomEncodableValue>(encodable_android_provider_arg));
          const auto& encodable_apple_provider_arg = args.at(3);
          if (encodable_apple_provider_arg.IsNull()) {
            reply(WrapError("apple_provider_arg unexpectedly null."));
            return;
          }
          const auto& apple_provider_arg = std::any_cast<const AppCheckAppleProvider&>(std::get<CustomEncodableValue>(encodable_apple_provider_arg));
          api->Activate(app_name_arg, web_provider_arg, android_provider_arg, apple_provider_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.getToken" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_name_arg = args.at(0);
          if (encodable_app_name_arg.IsNull()) {
            reply(WrapError("app_name_arg unexpectedly null."));
            return;
          }
          const auto& app_name_arg = std::get<std::string>(encodable_app_name_arg);
          const auto& encodable_force_refresh_arg = args.at(1);
          if (encodable_force_refresh_arg.IsNull()) {
            reply(WrapError("force_refresh_arg unexpectedly null."));
            return;
          }
          const auto& force_refresh_arg = std::get<bool>(encodable_force_refresh_arg);
          api->GetToken(app_name_arg, force_refresh_arg, [reply](ErrorOr<std::optional<std::string>>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            auto output_optional = std::move(output).TakeValue();
            if (output_optional) {
              wrapped.push_back(EncodableValue(std::move(output_optional).value()));
            } else {
              wrapped.push_back(EncodableValue());
            }
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.setTokenAutoRefreshEnabled" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_name_arg = args.at(0);
          if (encodable_app_name_arg.IsNull()) {
            reply(WrapError("app_name_arg unexpectedly null."));
            return;
          }
          const auto& app_name_arg = std::get<std::string>(encodable_app_name_arg);
          const auto& encodable_is_token_auto_refresh_enabled_arg = args.at(1);
          if (encodable_is_token_auto_refresh_enabled_arg.IsNull()) {
            reply(WrapError("is_token_auto_refresh_enabled_arg unexpectedly null."));
            return;
          }
          const auto& is_token_auto_refresh_enabled_arg = std::get<bool>(encodable_is_token_auto_refresh_enabled_arg);
          api->SetTokenAutoRefreshEnabled(app_name_arg, is_token_auto_refresh_enabled_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.getLimitedUseToken" + prepended_suffix, &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_name_arg = args.at(0);
          if (encodable_app_name_arg.IsNull()) {
            reply(WrapError("app_name_arg unexpectedly null."));
            return;
          }
          const auto& app_name_arg = std::get<std::string>(encodable_app_name_arg);
          api->GetLimitedUseToken(app_name_arg, [reply](ErrorOr<std::string>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue FirebaseAppCheckHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FirebaseAppCheckHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace firebase_app_check_windows
