// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_G_H_
#define PIGEON_MESSAGES_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_app_check_windows {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class FirebaseAppCheckHostApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};



// Generated class from Pigeon that represents data sent in messages.
class AppCheckWebProvider {
 public:
  // Constructs an object setting all fields.
  explicit AppCheckWebProvider(const std::string& provider_name);

  const std::string& provider_name() const;
  void set_provider_name(std::string_view value_arg);

 private:
  static AppCheckWebProvider FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class AppCheckPigeonSettings;
  friend class FirebaseAppCheckHostApi;
  friend class PigeonInternalCodecSerializer;
  std::string provider_name_;
};


// Generated class from Pigeon that represents data sent in messages.
class AppCheckAndroidProvider {
 public:
  // Constructs an object setting all fields.
  explicit AppCheckAndroidProvider(const std::string& provider_name);

  const std::string& provider_name() const;
  void set_provider_name(std::string_view value_arg);

 private:
  static AppCheckAndroidProvider FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class AppCheckPigeonSettings;
  friend class FirebaseAppCheckHostApi;
  friend class PigeonInternalCodecSerializer;
  std::string provider_name_;
};


// Generated class from Pigeon that represents data sent in messages.
class AppCheckAppleProvider {
 public:
  // Constructs an object setting all fields.
  explicit AppCheckAppleProvider(const std::string& provider_name);

  const std::string& provider_name() const;
  void set_provider_name(std::string_view value_arg);

 private:
  static AppCheckAppleProvider FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class AppCheckPigeonSettings;
  friend class FirebaseAppCheckHostApi;
  friend class PigeonInternalCodecSerializer;
  std::string provider_name_;
};


// Generated class from Pigeon that represents data sent in messages.
class AppCheckPigeonSettings {
 public:
  // Constructs an object setting all fields.
  explicit AppCheckPigeonSettings(
    const AppCheckWebProvider& web_provider,
    const AppCheckAndroidProvider& android_provider,
    const AppCheckAppleProvider& apple_provider);

  ~AppCheckPigeonSettings() = default;
  AppCheckPigeonSettings(const AppCheckPigeonSettings& other);
  AppCheckPigeonSettings& operator=(const AppCheckPigeonSettings& other);
  AppCheckPigeonSettings(AppCheckPigeonSettings&& other) = default;
  AppCheckPigeonSettings& operator=(AppCheckPigeonSettings&& other) noexcept = default;
  const AppCheckWebProvider& web_provider() const;
  void set_web_provider(const AppCheckWebProvider& value_arg);

  const AppCheckAndroidProvider& android_provider() const;
  void set_android_provider(const AppCheckAndroidProvider& value_arg);

  const AppCheckAppleProvider& apple_provider() const;
  void set_apple_provider(const AppCheckAppleProvider& value_arg);

 private:
  static AppCheckPigeonSettings FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FirebaseAppCheckHostApi;
  friend class PigeonInternalCodecSerializer;
  std::unique_ptr<AppCheckWebProvider> web_provider_;
  std::unique_ptr<AppCheckAndroidProvider> android_provider_;
  std::unique_ptr<AppCheckAppleProvider> apple_provider_;
};


class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;
 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class FirebaseAppCheckHostApi {
 public:
  FirebaseAppCheckHostApi(const FirebaseAppCheckHostApi&) = delete;
  FirebaseAppCheckHostApi& operator=(const FirebaseAppCheckHostApi&) = delete;
  virtual ~FirebaseAppCheckHostApi() {}
  virtual void Activate(
    const std::string& app_name,
    const AppCheckWebProvider& web_provider,
    const AppCheckAndroidProvider& android_provider,
    const AppCheckAppleProvider& apple_provider,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void GetToken(
    const std::string& app_name,
    bool force_refresh,
    std::function<void(ErrorOr<std::optional<std::string>> reply)> result) = 0;
  virtual void SetTokenAutoRefreshEnabled(
    const std::string& app_name,
    bool is_token_auto_refresh_enabled,
    std::function<void(std::optional<FlutterError> reply)> result) = 0;
  virtual void GetLimitedUseToken(
    const std::string& app_name,
    std::function<void(ErrorOr<std::string> reply)> result) = 0;

  // The codec used by FirebaseAppCheckHostApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `FirebaseAppCheckHostApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FirebaseAppCheckHostApi* api);
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    FirebaseAppCheckHostApi* api,
    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);
 protected:
  FirebaseAppCheckHostApi() = default;
};
}  // namespace firebase_app_check_windows
#endif  // PIGEON_MESSAGES_G_H_
