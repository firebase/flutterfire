// Copyright 2025, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package io.flutter.plugins.firebase.firebaseappcheck

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object GeneratedAndroidFirebaseAppCheckPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class AppCheckWebProvider (
  val providerName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AppCheckWebProvider {
      val providerName = pigeonVar_list[0] as String
      return AppCheckWebProvider(providerName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      providerName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AppCheckWebProvider) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseAppCheckPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppCheckAndroidProvider (
  val providerName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AppCheckAndroidProvider {
      val providerName = pigeonVar_list[0] as String
      return AppCheckAndroidProvider(providerName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      providerName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AppCheckAndroidProvider) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseAppCheckPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppCheckAppleProvider (
  val providerName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AppCheckAppleProvider {
      val providerName = pigeonVar_list[0] as String
      return AppCheckAppleProvider(providerName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      providerName,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AppCheckAppleProvider) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseAppCheckPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppCheckPigeonSettings (
  val webProvider: AppCheckWebProvider,
  val androidProvider: AppCheckAndroidProvider,
  val appleProvider: AppCheckAppleProvider
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AppCheckPigeonSettings {
      val webProvider = pigeonVar_list[0] as AppCheckWebProvider
      val androidProvider = pigeonVar_list[1] as AppCheckAndroidProvider
      val appleProvider = pigeonVar_list[2] as AppCheckAppleProvider
      return AppCheckPigeonSettings(webProvider, androidProvider, appleProvider)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      webProvider,
      androidProvider,
      appleProvider,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AppCheckPigeonSettings) {
      return false
    }
    if (this === other) {
      return true
    }
    return GeneratedAndroidFirebaseAppCheckPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class GeneratedAndroidFirebaseAppCheckPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppCheckWebProvider.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppCheckAndroidProvider.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppCheckAppleProvider.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppCheckPigeonSettings.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AppCheckWebProvider -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is AppCheckAndroidProvider -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AppCheckAppleProvider -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is AppCheckPigeonSettings -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FirebaseAppCheckHostApi {
  fun activate(appName: String, webProvider: AppCheckWebProvider, androidProvider: AppCheckAndroidProvider, appleProvider: AppCheckAppleProvider, callback: (Result<Unit>) -> Unit)
  fun getToken(appName: String, forceRefresh: Boolean, callback: (Result<String?>) -> Unit)
  fun setTokenAutoRefreshEnabled(appName: String, isTokenAutoRefreshEnabled: Boolean, callback: (Result<Unit>) -> Unit)
  fun getLimitedUseToken(appName: String, callback: (Result<String>) -> Unit)

  companion object {
    /** The codec used by FirebaseAppCheckHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      GeneratedAndroidFirebaseAppCheckPigeonCodec()
    }
    /** Sets up an instance of `FirebaseAppCheckHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FirebaseAppCheckHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.activate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val webProviderArg = args[1] as AppCheckWebProvider
            val androidProviderArg = args[2] as AppCheckAndroidProvider
            val appleProviderArg = args[3] as AppCheckAppleProvider
            api.activate(appNameArg, webProviderArg, androidProviderArg, appleProviderArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.getToken$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val forceRefreshArg = args[1] as Boolean
            api.getToken(appNameArg, forceRefreshArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.setTokenAutoRefreshEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            val isTokenAutoRefreshEnabledArg = args[1] as Boolean
            api.setTokenAutoRefreshEnabled(appNameArg, isTokenAutoRefreshEnabledArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapError(error))
              } else {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.firebase_app_check_platform_interface.FirebaseAppCheckHostApi.getLimitedUseToken$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appNameArg = args[0] as String
            api.getLimitedUseToken(appNameArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(GeneratedAndroidFirebaseAppCheckPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
